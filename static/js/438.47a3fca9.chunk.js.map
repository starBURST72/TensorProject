{"version":3,"file":"static/js/438.47a3fca9.chunk.js","mappings":"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","sources":["../node_modules/@bundled-es-modules/statuses/index-esm.js","../node_modules/@mswjs/cookies/src/store.ts","../node_modules/@mswjs/cookies/node_modules/set-cookie-parser/lib/set-cookie.js","../node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","../node_modules/@babel/runtime/helpers/esm/assertClassBrand.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js","../node_modules/@open-draft/until/src/until.ts","../node_modules/msw/src/core/utils/executeHandlers.ts","../node_modules/msw/src/core/utils/handleRequest.ts","../node_modules/msw/src/core/utils/request/onUnhandledRequest.ts","../node_modules/msw/src/core/utils/request/readResponseCookies.ts","../node_modules/msw/src/core/utils/internal/Disposable.ts","../node_modules/msw/src/core/SetupApi.ts","../node_modules/msw/src/core/utils/internal/pipeEvents.ts","../node_modules/msw/src/core/utils/internal/toReadonlyArray.ts","../node_modules/msw/src/core/utils/internal/isObject.ts","../node_modules/msw/src/core/utils/internal/mergeRight.ts","../node_modules/msw/node_modules/.pnpm/outvariant@1.4.2/node_modules/outvariant/src/format.ts","../node_modules/msw/node_modules/.pnpm/outvariant@1.4.2/node_modules/outvariant/src/invariant.ts","../node_modules/msw/node_modules/.pnpm/is-node-process@1.2.0/node_modules/is-node-process/src/index.ts","../node_modules/msw/node_modules/.pnpm/@open-draft+until@2.1.0/node_modules/@open-draft/until/src/until.ts","../node_modules/msw/src/browser/setupWorker/start/utils/getWorkerByRegistration.ts","../node_modules/msw/src/browser/setupWorker/start/utils/getWorkerInstance.ts","../node_modules/msw/src/browser/utils/getAbsoluteWorkerUrl.ts","../node_modules/msw/src/browser/setupWorker/start/utils/printStartMessage.ts","../node_modules/msw/src/browser/setupWorker/start/utils/createMessageChannel.ts","../node_modules/msw/src/browser/utils/pruneGetRequestBody.ts","../node_modules/msw/src/browser/setupWorker/start/createRequestListener.ts","../node_modules/msw/src/browser/utils/parseWorkerRequest.ts","../node_modules/msw/src/core/utils/toResponseInit.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/bufferUtils.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/responseUtils.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/glossary.ts","../node_modules/msw/node_modules/.pnpm/@open-draft+logger@0.3.0/node_modules/@open-draft/logger/lib/index.mjs","../node_modules/msw/node_modules/.pnpm/strict-event-emitter@0.5.1/node_modules/strict-event-emitter/src/MemoryLeakError.ts","../node_modules/msw/node_modules/.pnpm/strict-event-emitter@0.5.1/node_modules/strict-event-emitter/src/Emitter.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/Interceptor.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/createRequestId.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/BatchInterceptor.ts","../node_modules/msw/src/browser/setupWorker/start/createStartHandler.ts","../node_modules/msw/src/browser/setupWorker/start/createResponseListener.ts","../node_modules/msw/src/browser/utils/checkWorkerIntegrity.ts","../node_modules/msw/src/browser/setupWorker/start/utils/validateWorkerScope.ts","../node_modules/msw/src/browser/setupWorker/start/utils/enableMocking.ts","../node_modules/msw/src/browser/setupWorker/stop/utils/printStopMessage.ts","../node_modules/msw/src/browser/setupWorker/stop/createStop.ts","../node_modules/msw/src/browser/setupWorker/start/utils/prepareStartHandler.ts","../node_modules/msw/node_modules/.pnpm/@open-draft+deferred-promise@2.2.0/node_modules/@open-draft/deferred-promise/src/DeferredPromise.ts","../node_modules/msw/node_modules/.pnpm/@open-draft+deferred-promise@2.2.0/node_modules/@open-draft/deferred-promise/src/createDeferredExecutor.ts","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/RequestController.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/toInteractiveRequest.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/emitAsync.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/fetch/index.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/canParseUrl.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/isPropertyAccessible.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/polyfills/EventPolyfill.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/utils/createEvent.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/findPropertySource.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/createProxy.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/utils/createResponse.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/utils/concatArrayBuffer.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/utils/parseJson.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/utils/isDomParserSupportedType.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/index.ts","../node_modules/msw/node_modules/.pnpm/@mswjs+interceptors@0.26.15/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts","../node_modules/msw/src/browser/setupWorker/start/createFallbackStart.ts","../node_modules/msw/src/browser/setupWorker/start/createFallbackRequestListener.ts","../node_modules/msw/src/browser/utils/supportsReadableStreamTransfer.ts","../node_modules/msw/src/browser/setupWorker/setupWorker.ts","../node_modules/msw/src/browser/setupWorker/stop/createFallbackStop.ts","../node_modules/headers-polyfill/src/Headers.ts","../node_modules/headers-polyfill/node_modules/set-cookie-parser/lib/set-cookie.js","../node_modules/headers-polyfill/src/utils/normalizeHeaderName.ts","../node_modules/headers-polyfill/src/utils/normalizeHeaderValue.ts","../node_modules/headers-polyfill/src/utils/isValidHeaderName.ts","../node_modules/headers-polyfill/src/utils/isValidHeaderValue.ts","../node_modules/msw/src/core/utils/HttpResponse/decorators.ts","../node_modules/msw/src/core/HttpResponse.ts","../node_modules/msw/src/core/utils/internal/getCallFrame.ts","../node_modules/msw/src/core/handlers/RequestHandler.ts","../node_modules/msw/src/core/utils/internal/isIterable.ts","../node_modules/msw/src/core/utils/logging/serializeResponse.ts","../node_modules/path-to-regexp/src/index.ts","../node_modules/@mswjs/interceptors/src/utils/bufferUtils.ts","../node_modules/@mswjs/interceptors/src/glossary.ts","../node_modules/@open-draft/logger/lib/index.mjs","../node_modules/is-node-process/src/index.ts","../node_modules/msw/src/core/utils/url/cleanUrl.ts","../node_modules/msw/src/core/utils/matching/normalizePath.ts","../node_modules/msw/src/core/utils/url/getAbsoluteUrl.ts","../node_modules/msw/src/core/utils/url/isAbsoluteUrl.ts","../node_modules/msw/src/core/utils/matching/matchRequestUrl.ts","../node_modules/@mswjs/interceptors/src/utils/getCleanUrl.ts","../node_modules/@bundled-es-modules/cookie/index-esm.js","../node_modules/msw/src/core/utils/request/getRequestCookies.ts","../node_modules/msw/src/core/handlers/HttpHandler.ts","../node_modules/msw/src/core/utils/internal/isStringEqual.ts","../node_modules/msw/src/core/utils/logging/serializeRequest.ts","../node_modules/msw/src/core/utils/logging/getStatusCodeColor.ts","../node_modules/msw/src/core/utils/logging/getTimestamp.ts","../node_modules/msw/src/core/http.ts","../node_modules/msw/src/core/utils/internal/devUtils.ts","../node_modules/msw/src/core/utils/request/toPublicUrl.ts","../node_modules/outvariant/src/format.ts","../node_modules/outvariant/src/invariant.ts","../node_modules/strict-event-emitter/src/MemoryLeakError.ts","../node_modules/strict-event-emitter/src/Emitter.ts"],"sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/statuses/codes.json\nvar require_codes = __commonJS({\n  \"node_modules/statuses/codes.json\"(exports, module) {\n    module.exports = {\n      \"100\": \"Continue\",\n      \"101\": \"Switching Protocols\",\n      \"102\": \"Processing\",\n      \"103\": \"Early Hints\",\n      \"200\": \"OK\",\n      \"201\": \"Created\",\n      \"202\": \"Accepted\",\n      \"203\": \"Non-Authoritative Information\",\n      \"204\": \"No Content\",\n      \"205\": \"Reset Content\",\n      \"206\": \"Partial Content\",\n      \"207\": \"Multi-Status\",\n      \"208\": \"Already Reported\",\n      \"226\": \"IM Used\",\n      \"300\": \"Multiple Choices\",\n      \"301\": \"Moved Permanently\",\n      \"302\": \"Found\",\n      \"303\": \"See Other\",\n      \"304\": \"Not Modified\",\n      \"305\": \"Use Proxy\",\n      \"307\": \"Temporary Redirect\",\n      \"308\": \"Permanent Redirect\",\n      \"400\": \"Bad Request\",\n      \"401\": \"Unauthorized\",\n      \"402\": \"Payment Required\",\n      \"403\": \"Forbidden\",\n      \"404\": \"Not Found\",\n      \"405\": \"Method Not Allowed\",\n      \"406\": \"Not Acceptable\",\n      \"407\": \"Proxy Authentication Required\",\n      \"408\": \"Request Timeout\",\n      \"409\": \"Conflict\",\n      \"410\": \"Gone\",\n      \"411\": \"Length Required\",\n      \"412\": \"Precondition Failed\",\n      \"413\": \"Payload Too Large\",\n      \"414\": \"URI Too Long\",\n      \"415\": \"Unsupported Media Type\",\n      \"416\": \"Range Not Satisfiable\",\n      \"417\": \"Expectation Failed\",\n      \"418\": \"I'm a Teapot\",\n      \"421\": \"Misdirected Request\",\n      \"422\": \"Unprocessable Entity\",\n      \"423\": \"Locked\",\n      \"424\": \"Failed Dependency\",\n      \"425\": \"Too Early\",\n      \"426\": \"Upgrade Required\",\n      \"428\": \"Precondition Required\",\n      \"429\": \"Too Many Requests\",\n      \"431\": \"Request Header Fields Too Large\",\n      \"451\": \"Unavailable For Legal Reasons\",\n      \"500\": \"Internal Server Error\",\n      \"501\": \"Not Implemented\",\n      \"502\": \"Bad Gateway\",\n      \"503\": \"Service Unavailable\",\n      \"504\": \"Gateway Timeout\",\n      \"505\": \"HTTP Version Not Supported\",\n      \"506\": \"Variant Also Negotiates\",\n      \"507\": \"Insufficient Storage\",\n      \"508\": \"Loop Detected\",\n      \"509\": \"Bandwidth Limit Exceeded\",\n      \"510\": \"Not Extended\",\n      \"511\": \"Network Authentication Required\"\n    };\n  }\n});\n\n// node_modules/statuses/index.js\nvar require_statuses = __commonJS({\n  \"node_modules/statuses/index.js\"(exports, module) {\n    \"use strict\";\n    var codes = require_codes();\n    module.exports = status2;\n    status2.message = codes;\n    status2.code = createMessageToStatusCodeMap(codes);\n    status2.codes = createStatusCodeList(codes);\n    status2.redirect = {\n      300: true,\n      301: true,\n      302: true,\n      303: true,\n      305: true,\n      307: true,\n      308: true\n    };\n    status2.empty = {\n      204: true,\n      205: true,\n      304: true\n    };\n    status2.retry = {\n      502: true,\n      503: true,\n      504: true\n    };\n    function createMessageToStatusCodeMap(codes2) {\n      var map = {};\n      Object.keys(codes2).forEach(function forEachCode(code) {\n        var message = codes2[code];\n        var status3 = Number(code);\n        map[message.toLowerCase()] = status3;\n      });\n      return map;\n    }\n    function createStatusCodeList(codes2) {\n      return Object.keys(codes2).map(function mapCode(code) {\n        return Number(code);\n      });\n    }\n    function getStatusCode(message) {\n      var msg = message.toLowerCase();\n      if (!Object.prototype.hasOwnProperty.call(status2.code, msg)) {\n        throw new Error('invalid status message: \"' + message + '\"');\n      }\n      return status2.code[msg];\n    }\n    function getStatusMessage(code) {\n      if (!Object.prototype.hasOwnProperty.call(status2.message, code)) {\n        throw new Error(\"invalid status code: \" + code);\n      }\n      return status2.message[code];\n    }\n    function status2(code) {\n      if (typeof code === \"number\") {\n        return getStatusMessage(code);\n      }\n      if (typeof code !== \"string\") {\n        throw new TypeError(\"code must be a number or string\");\n      }\n      var n = parseInt(code, 10);\n      if (!isNaN(n)) {\n        return getStatusMessage(n);\n      }\n      return getStatusCode(code);\n    }\n  }\n});\n\n// source.js\nvar import_statuses = __toESM(require_statuses(), 1);\nvar source_default = import_statuses.default;\nexport {\n  source_default as default\n};\n/*! Bundled license information:\n\nstatuses/index.js:\n  (*!\n   * statuses\n   * Copyright(c) 2014 Jonathan Ong\n   * Copyright(c) 2016 Douglas Christopher Wilson\n   * MIT Licensed\n   *)\n*/\n","import { Cookie, parse as parseCookie } from 'set-cookie-parser'\n\ninterface RequestLike {\n  credentials: Request['credentials']\n  url: string\n}\n\ninterface HeadersLike {\n  get(name: string): string | null\n}\n\ninterface ResponseLike {\n  headers: HeadersLike\n}\n\nexport type Store = Map<string, StoreEntry>\nexport type StoreEntry = Map<string, Cookie>\nexport type CookieString = Omit<Cookie, 'expires'> & { expires?: string }\n\nexport const PERSISTENCY_KEY = 'MSW_COOKIE_STORE'\n\nfunction supportsLocalStorage() {\n  try {\n    if (localStorage == null) {\n      return false\n    }\n\n    const testKey = PERSISTENCY_KEY + '_test'\n\n    localStorage.setItem(testKey, 'test')\n    localStorage.getItem(testKey)\n    localStorage.removeItem(testKey)\n\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n/**\n * Checks that accessing a given property on an object\n * by name does not throw an error.\n *\n * This is generally used to avoid issues in environments\n * like `miniflare` where some properties are defined as getters\n * where accessing that property throws directly.\n */\nfunction isPropertyAccessible<Obj extends Record<string, any>>(\n  object: Obj,\n  method: keyof Obj,\n) {\n  try {\n    object[method]\n    return true\n  } catch {\n    return false\n  }\n}\n\nclass CookieStore {\n  private store: Store\n\n  constructor() {\n    this.store = new Map()\n  }\n\n  /**\n   * Sets the given request cookies into the store.\n   * Respects the `request.credentials` policy.\n   */\n  add(request: RequestLike, response: ResponseLike): void {\n    if (\n      isPropertyAccessible(request, 'credentials') &&\n      request.credentials === 'omit'\n    ) {\n      return\n    }\n\n    const requestUrl = new URL(request.url)\n    const responseCookies = response.headers.get('set-cookie')\n\n    if (!responseCookies) {\n      return\n    }\n\n    const now = Date.now()\n    const parsedResponseCookies = parseCookie(responseCookies).map(\n      ({ maxAge, ...cookie }) => ({\n        ...cookie,\n        expires:\n          maxAge === undefined ? cookie.expires : new Date(now + maxAge * 1000),\n        maxAge,\n      }),\n    )\n\n    const prevCookies =\n      this.store.get(requestUrl.origin) || new Map<string, Cookie>()\n\n    parsedResponseCookies.forEach((cookie) => {\n      this.store.set(requestUrl.origin, prevCookies.set(cookie.name, cookie))\n    })\n  }\n\n  /**\n   * Returns cookies relevant to the given request\n   * and its `request.credentials` policy.\n   */\n  get(request: RequestLike): StoreEntry {\n    this.deleteExpiredCookies()\n\n    const requestUrl = new URL(request.url)\n    const originCookies =\n      this.store.get(requestUrl.origin) || new Map<string, Cookie>()\n\n    if (!isPropertyAccessible(request, 'credentials')) {\n      return originCookies\n    }\n\n    switch (request.credentials) {\n      case 'include': {\n        // Support running this method in Node.js.\n        if (typeof document === 'undefined') {\n          return originCookies\n        }\n\n        const documentCookies = parseCookie(document.cookie)\n\n        documentCookies.forEach((cookie) => {\n          originCookies.set(cookie.name, cookie)\n        })\n\n        return originCookies\n      }\n\n      case 'same-origin': {\n        return originCookies\n      }\n\n      default:\n        return new Map()\n    }\n  }\n\n  /**\n   * Returns a collection of all stored cookies.\n   */\n  getAll(): Store {\n    this.deleteExpiredCookies()\n    return this.store\n  }\n\n  /**\n   * Deletes all cookies associated with the given request.\n   */\n  deleteAll(request: RequestLike): void {\n    const requestUrl = new URL(request.url)\n    this.store.delete(requestUrl.origin)\n  }\n\n  /**\n   * Clears the entire cookie store.\n   */\n  clear(): void {\n    this.store.clear()\n  }\n\n  /**\n   * Hydrates the virtual cookie store from the `localStorage` if defined.\n   */\n  hydrate(): void {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    const persistedCookies = localStorage.getItem(PERSISTENCY_KEY)\n\n    if (!persistedCookies) {\n      return\n    }\n\n    try {\n      const parsedCookies: [string, [string, CookieString][]][] =\n        JSON.parse(persistedCookies)\n\n      parsedCookies.forEach(([origin, cookies]) => {\n        this.store.set(\n          origin,\n          new Map(\n            cookies.map(([token, { expires, ...cookie }]) => [\n              token,\n              expires === undefined\n                ? cookie\n                : { ...cookie, expires: new Date(expires) },\n            ]),\n          ),\n        )\n      })\n    } catch (error) {\n      console.warn(`\n[virtual-cookie] Failed to parse a stored cookie from the localStorage (key \"${PERSISTENCY_KEY}\").\n\nStored value:\n${localStorage.getItem(PERSISTENCY_KEY)}\n\nThrown exception:\n${error}\n\nInvalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`)\n      localStorage.removeItem(PERSISTENCY_KEY)\n    }\n  }\n\n  /**\n   * Persists the current virtual cookies into the `localStorage` if defined,\n   * so they are available on the next page load.\n   */\n  persist(): void {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    const serializedCookies = Array.from(this.store.entries()).map(\n      ([origin, cookies]) => {\n        return [origin, Array.from(cookies.entries())]\n      },\n    )\n\n    localStorage.setItem(PERSISTENCY_KEY, JSON.stringify(serializedCookies))\n  }\n\n  private deleteExpiredCookies() {\n    const now = Date.now()\n\n    this.store.forEach((originCookies, origin) => {\n      originCookies.forEach(({ expires, name }) => {\n        if (expires !== undefined && expires.getTime() <= now) {\n          originCookies.delete(name)\n        }\n      })\n\n      if (originCookies.size === 0) {\n        this.store.delete(origin)\n      }\n    })\n  }\n}\n\nexport const store = new CookieStore()\n","\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name,\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return { name: name, value: value };\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch =\n        input.headers[\n          Object.keys(input.headers).find(function (key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })\n        ];\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n        );\n      }\n      input = sch;\n    }\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}","export default function _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}","import assertClassBrand from \"./assertClassBrand.js\";\nexport default function _classPrivateFieldGet2(s, a) {\n  return s.get(assertClassBrand(s, a));\n}","export type AsyncTuple<\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n> =\n  | {\n      error: ErrorType\n      data: null\n    }\n  | { error: null; data: DataType }\n\n/**\n * Gracefully handles a given Promise factory.\n * @example\n * const { error, data } = await until(() => asyncAction())\n */\nexport const until = async <\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n>(\n  promise: () => Promise<DataType>,\n): Promise<AsyncTuple<ErrorType, DataType>> => {\n  try {\n    const data = await promise().catch((error) => {\n      throw error\n    })\n    return { error: null, data }\n  } catch (error) {\n    return { error, data: null }\n  }\n}\n","import {\n  RequestHandler,\n  RequestHandlerExecutionResult,\n} from '../handlers/RequestHandler'\n\nexport interface HandlersExecutionResult {\n  handler: RequestHandler\n  parsedResult?: any\n  response?: Response\n}\n\nexport interface ResponseResolutionContext {\n  baseUrl?: string\n}\n\n/**\n * Executes the list of request handlers against the given request.\n * Returns the execution result object containing any matching request\n * handler and any mocked response it returned.\n */\nexport const executeHandlers = async <Handlers extends Array<RequestHandler>>({\n  request,\n  requestId,\n  handlers,\n  resolutionContext,\n}: {\n  request: Request\n  requestId: string\n  handlers: Handlers\n  resolutionContext?: ResponseResolutionContext\n}): Promise<HandlersExecutionResult | null> => {\n  let matchingHandler: RequestHandler | null = null\n  let result: RequestHandlerExecutionResult<any> | null = null\n\n  for (const handler of handlers) {\n    result = await handler.run({ request, requestId, resolutionContext })\n\n    // If the handler produces some result for this request,\n    // it automatically becomes matching.\n    if (result !== null) {\n      matchingHandler = handler\n    }\n\n    // Stop the lookup if this handler returns a mocked response.\n    // If it doesn't, it will still be considered the last matching\n    // handler until any of them returns a response. This way we can\n    // distinguish between fallthrough handlers without responses\n    // and the lack of a matching handler.\n    if (result?.response) {\n      break\n    }\n  }\n\n  if (matchingHandler) {\n    return {\n      handler: matchingHandler,\n      parsedResult: result?.parsedResult,\n      response: result?.response,\n    }\n  }\n\n  return null\n}\n","import { until } from '@open-draft/until'\nimport { Emitter } from 'strict-event-emitter'\nimport { RequestHandler } from '../handlers/RequestHandler'\nimport { LifeCycleEventsMap, SharedOptions } from '../sharedOptions'\nimport { RequiredDeep } from '../typeUtils'\nimport { HandlersExecutionResult, executeHandlers } from './executeHandlers'\nimport { onUnhandledRequest } from './request/onUnhandledRequest'\nimport { readResponseCookies } from './request/readResponseCookies'\n\nexport interface HandleRequestOptions {\n  /**\n   * `resolutionContext` is not part of the general public api\n   * but is exposed to aid in creating extensions like\n   * `@mswjs/http-middleware`.\n   */\n  resolutionContext?: {\n    /**\n     * A base url to use when resolving relative urls.\n     * @note This is primarily used by the `@mswjs/http-middleware`\n     * to resolve relative urls in the context of the running server\n     */\n    baseUrl?: string\n  }\n\n  /**\n   * Transforms a `MockedResponse` instance returned from a handler\n   * to a response instance supported by the lower tooling (i.e. interceptors).\n   */\n  transformResponse?(response: Response): Response\n\n  /**\n   * Invoked whenever a request is performed as-is.\n   */\n  onPassthroughResponse?(request: Request): void\n\n  /**\n   * Invoked when the mocked response is ready to be sent.\n   */\n  onMockedResponse?(\n    response: Response,\n    handler: RequiredDeep<HandlersExecutionResult>,\n  ): void\n}\n\nexport async function handleRequest(\n  request: Request,\n  requestId: string,\n  handlers: Array<RequestHandler>,\n  options: RequiredDeep<SharedOptions>,\n  emitter: Emitter<LifeCycleEventsMap>,\n  handleRequestOptions?: HandleRequestOptions,\n): Promise<Response | undefined> {\n  emitter.emit('request:start', { request, requestId })\n\n  // Perform bypassed requests (i.e. wrapped in \"bypass()\") as-is.\n  if (request.headers.get('x-msw-intention') === 'bypass') {\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Resolve a mocked response from the list of request handlers.\n  const lookupResult = await until(() => {\n    return executeHandlers({\n      request,\n      requestId,\n      handlers,\n      resolutionContext: handleRequestOptions?.resolutionContext,\n    })\n  })\n\n  if (lookupResult.error) {\n    // Allow developers to react to unhandled exceptions in request handlers.\n    emitter.emit('unhandledException', {\n      error: lookupResult.error,\n      request,\n      requestId,\n    })\n    throw lookupResult.error\n  }\n\n  // If the handler lookup returned nothing, no request handler was found\n  // matching this request. Report the request as unhandled.\n  if (!lookupResult.data) {\n    await onUnhandledRequest(request, options.onUnhandledRequest)\n    emitter.emit('request:unhandled', { request, requestId })\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  const { response } = lookupResult.data\n\n  // When the handled request returned no mocked response, warn the developer,\n  // as it may be an oversight on their part. Perform the request as-is.\n  if (!response) {\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Perform the request as-is when the developer explicitly returned \"req.passthrough()\".\n  // This produces no warning as the request was handled.\n  if (\n    response.status === 302 &&\n    response.headers.get('x-msw-intention') === 'passthrough'\n  ) {\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Store all the received response cookies in the virtual cookie store.\n  readResponseCookies(request, response)\n\n  emitter.emit('request:match', { request, requestId })\n\n  const requiredLookupResult =\n    lookupResult.data as RequiredDeep<HandlersExecutionResult>\n\n  const transformedResponse =\n    handleRequestOptions?.transformResponse?.(response) ||\n    (response as any as Response)\n\n  handleRequestOptions?.onMockedResponse?.(\n    transformedResponse,\n    requiredLookupResult,\n  )\n\n  emitter.emit('request:end', { request, requestId })\n\n  return transformedResponse\n}\n","import { toPublicUrl } from './toPublicUrl'\nimport { devUtils } from '../internal/devUtils'\n\nexport interface UnhandledRequestPrint {\n  warning(): void\n  error(): void\n}\n\nexport type UnhandledRequestCallback = (\n  request: Request,\n  print: UnhandledRequestPrint,\n) => void\n\nexport type UnhandledRequestStrategy =\n  | 'bypass'\n  | 'warn'\n  | 'error'\n  | UnhandledRequestCallback\n\nexport async function onUnhandledRequest(\n  request: Request,\n  strategy: UnhandledRequestStrategy = 'warn',\n): Promise<void> {\n  const url = new URL(request.url)\n  const publicUrl = toPublicUrl(url) + url.search\n\n  const unhandledRequestMessage = `intercepted a request without a matching request handler:\\n\\n  \\u2022 ${request.method} ${publicUrl}\\n\\nIf you still wish to intercept this unhandled request, please create a request handler for it.\\nRead more: https://mswjs.io/docs/getting-started/mocks`\n\n  function applyStrategy(strategy: UnhandledRequestStrategy) {\n    switch (strategy) {\n      case 'error': {\n        // Print a developer-friendly error.\n        devUtils.error('Error: %s', unhandledRequestMessage)\n\n        // Throw an exception to halt request processing and not perform the original request.\n        throw new Error(\n          devUtils.formatMessage(\n            'Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.',\n          ),\n        )\n      }\n\n      case 'warn': {\n        devUtils.warn('Warning: %s', unhandledRequestMessage)\n        break\n      }\n\n      case 'bypass':\n        break\n\n      default:\n        throw new Error(\n          devUtils.formatMessage(\n            'Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.',\n            strategy,\n          ),\n        )\n    }\n  }\n\n  if (typeof strategy === 'function') {\n    strategy(request, {\n      warning: applyStrategy.bind(null, 'warn'),\n      error: applyStrategy.bind(null, 'error'),\n    })\n    return\n  }\n\n  /**\n   * @note Ignore \"file://\" requests.\n   * Those often are an implementation detail of modern tooling\n   * that fetches modules via HTTP. Developers don't issue those\n   * requests and so they mustn't be warned about them.\n   */\n  if (url.protocol === 'file:') {\n    return\n  }\n\n  applyStrategy(strategy)\n}\n","import { store } from '@mswjs/cookies'\n\nexport function readResponseCookies(\n  request: Request,\n  response: Response,\n): void {\n  store.add({ ...request, url: request.url.toString() }, response)\n  store.persist()\n}\n","export type DisposableSubscription = () => Promise<void> | void\n\nexport class Disposable {\n  protected subscriptions: Array<DisposableSubscription> = []\n\n  public async dispose() {\n    await Promise.all(this.subscriptions.map((subscription) => subscription()))\n  }\n}\n","import { invariant } from 'outvariant'\nimport { EventMap, Emitter } from 'strict-event-emitter'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n} from './handlers/RequestHandler'\nimport { LifeCycleEventEmitter } from './sharedOptions'\nimport { devUtils } from './utils/internal/devUtils'\nimport { pipeEvents } from './utils/internal/pipeEvents'\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray'\nimport { Disposable } from './utils/internal/Disposable'\n\nexport abstract class HandlersController {\n  abstract prepend(runtimeHandlers: Array<RequestHandler>): void\n  abstract reset(nextHandles: Array<RequestHandler>): void\n  abstract currentHandlers(): Array<RequestHandler>\n}\n\nexport class InMemoryHandlersController implements HandlersController {\n  private handlers: Array<RequestHandler>\n\n  constructor(private initialHandlers: Array<RequestHandler>) {\n    this.handlers = [...initialHandlers]\n  }\n\n  public prepend(runtimeHandles: Array<RequestHandler>): void {\n    this.handlers.unshift(...runtimeHandles)\n  }\n\n  public reset(nextHandlers: Array<RequestHandler>): void {\n    this.handlers =\n      nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers]\n  }\n\n  public currentHandlers(): Array<RequestHandler> {\n    return this.handlers\n  }\n}\n\n/**\n * Generic class for the mock API setup.\n */\nexport abstract class SetupApi<EventsMap extends EventMap> extends Disposable {\n  protected handlersController: HandlersController\n  protected readonly emitter: Emitter<EventsMap>\n  protected readonly publicEmitter: Emitter<EventsMap>\n\n  public readonly events: LifeCycleEventEmitter<EventsMap>\n\n  constructor(...initialHandlers: Array<RequestHandler>) {\n    super()\n\n    invariant(\n      this.validateHandlers(initialHandlers),\n      devUtils.formatMessage(\n        `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`,\n      ),\n    )\n\n    this.handlersController = new InMemoryHandlersController(initialHandlers)\n\n    this.emitter = new Emitter<EventsMap>()\n    this.publicEmitter = new Emitter<EventsMap>()\n    pipeEvents(this.emitter, this.publicEmitter)\n\n    this.events = this.createLifeCycleEvents()\n\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners()\n      this.publicEmitter.removeAllListeners()\n    })\n  }\n\n  private validateHandlers(handlers: ReadonlyArray<RequestHandler>): boolean {\n    // Guard against incorrect call signature of the setup API.\n    return handlers.every((handler) => !Array.isArray(handler))\n  }\n\n  public use(...runtimeHandlers: Array<RequestHandler>): void {\n    invariant(\n      this.validateHandlers(runtimeHandlers),\n      devUtils.formatMessage(\n        `Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`,\n      ),\n    )\n\n    this.handlersController.prepend(runtimeHandlers)\n  }\n\n  public restoreHandlers(): void {\n    this.handlersController.currentHandlers().forEach((handler) => {\n      handler.isUsed = false\n    })\n  }\n\n  public resetHandlers(...nextHandlers: Array<RequestHandler>): void {\n    this.handlersController.reset(nextHandlers)\n  }\n\n  public listHandlers(): ReadonlyArray<\n    RequestHandler<RequestHandlerDefaultInfo, any, any>\n  > {\n    return toReadonlyArray(this.handlersController.currentHandlers())\n  }\n\n  private createLifeCycleEvents(): LifeCycleEventEmitter<EventsMap> {\n    return {\n      on: (...args: any[]) => {\n        return (this.publicEmitter.on as any)(...args)\n      },\n      removeListener: (...args: any[]) => {\n        return (this.publicEmitter.removeListener as any)(...args)\n      },\n      removeAllListeners: (...args: any[]) => {\n        return this.publicEmitter.removeAllListeners(...args)\n      },\n    }\n  }\n}\n","import { Emitter, EventMap } from 'strict-event-emitter'\n\n/**\n * Pipes all emitted events from one emitter to another.\n */\nexport function pipeEvents<Events extends EventMap>(\n  source: Emitter<Events>,\n  destination: Emitter<Events>,\n): void {\n  const rawEmit: typeof source.emit & { _isPiped?: boolean } = source.emit\n\n  if (rawEmit._isPiped) {\n    return\n  }\n\n  const sourceEmit: typeof source.emit & { _isPiped?: boolean } =\n    function sourceEmit(this: typeof source, event, ...data) {\n      destination.emit(event, ...data)\n      return rawEmit.call(this, event, ...data)\n    }\n\n  sourceEmit._isPiped = true\n\n  source.emit = sourceEmit\n}\n","/**\n * Creates an immutable copy of the given array.\n */\nexport function toReadonlyArray<T>(source: Array<T>): ReadonlyArray<T> {\n  const clone = [...source] as Array<T>\n  Object.freeze(clone)\n  return clone\n}\n","/**\n * Determines if the given value is an object.\n */\nexport function isObject(value: any): boolean {\n  return value != null && typeof value === 'object' && !Array.isArray(value)\n}\n","import { isObject } from './isObject'\n\n/**\n * Deeply merges two given objects with the right one\n * having a priority during property assignment.\n */\nexport function mergeRight(\n  left: Record<string, any>,\n  right: Record<string, any>,\n) {\n  return Object.entries(right).reduce(\n    (result, [key, rightValue]) => {\n      const leftValue = result[key]\n\n      if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n        result[key] = leftValue.concat(rightValue)\n        return result\n      }\n\n      if (isObject(leftValue) && isObject(rightValue)) {\n        result[key] = mergeRight(leftValue, rightValue)\n        return result\n      }\n\n      result[key] = rightValue\n      return result\n    },\n    Object.assign({}, left),\n  )\n}\n","const POSITIONALS_EXP = /(%?)(%([sdijo]))/g\n\nfunction serializePositional(positional: any, flag: string): any {\n  switch (flag) {\n    // Strings.\n    case 's':\n      return positional\n\n    // Digits.\n    case 'd':\n    case 'i':\n      return Number(positional)\n\n    // JSON.\n    case 'j':\n      return JSON.stringify(positional)\n\n    // Objects.\n    case 'o': {\n      // Preserve stings to prevent extra quotes around them.\n      if (typeof positional === 'string') {\n        return positional\n      }\n\n      const json = JSON.stringify(positional)\n\n      // If the positional isn't serializable, return it as-is.\n      if (json === '{}' || json === '[]' || /^\\[object .+?\\]$/.test(json)) {\n        return positional\n      }\n\n      return json\n    }\n  }\n}\n\nexport function format(message: string, ...positionals: any[]): string {\n  if (positionals.length === 0) {\n    return message\n  }\n\n  let positionalIndex = 0\n  let formattedMessage = message.replace(\n    POSITIONALS_EXP,\n    (match, isEscaped, _, flag) => {\n      const positional = positionals[positionalIndex]\n      const value = serializePositional(positional, flag)\n\n      if (!isEscaped) {\n        positionalIndex++\n        return value\n      }\n\n      return match\n    }\n  )\n\n  // Append unresolved positionals to string as-is.\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(' ')}`\n  }\n\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, '%')\n\n  return formattedMessage\n}\n","import { format } from './format'\n\nconst STACK_FRAMES_TO_IGNORE = 2\n\n/**\n * Remove the \"outvariant\" package trace from the given error.\n * This scopes down the error stack to the relevant parts\n * when used in other applications.\n */\nfunction cleanErrorStack(error: Error): void {\n  if (!error.stack) {\n    return\n  }\n\n  const nextStack = error.stack.split('\\n')\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE)\n  error.stack = nextStack.join('\\n')\n}\n\nexport class InvariantError extends Error {\n  name = 'Invariant Violation'\n\n  constructor(public readonly message: string, ...positionals: any[]) {\n    super(message)\n    this.message = format(message, ...positionals)\n    cleanErrorStack(this)\n  }\n}\n\nexport interface CustomErrorConstructor {\n  new (message: string): Error\n}\n\nexport interface CustomErrorFactory {\n  (message: string): Error\n}\n\nexport type CustomError = CustomErrorConstructor | CustomErrorFactory\n\ntype Invariant = {\n  (\n    predicate: unknown,\n    message: string,\n    ...positionals: any[]\n  ): asserts predicate\n\n  as(\n    ErrorConstructor: CustomError,\n    predicate: unknown,\n    message: string,\n    ...positionals: unknown[]\n  ): asserts predicate\n}\n\nexport const invariant: Invariant = (\n  predicate,\n  message,\n  ...positionals\n): asserts predicate => {\n  if (!predicate) {\n    throw new InvariantError(message, ...positionals)\n  }\n}\n\ninvariant.as = (ErrorConstructor, predicate, message, ...positionals) => {\n  if (!predicate) {\n    const formatMessage = positionals.length === 0 ? message : format(message, positionals);\n    let error: Error;\n\n    try {\n      error = Reflect.construct(ErrorConstructor as CustomErrorConstructor, [formatMessage]);\n    } catch(err) {\n      error = (ErrorConstructor as CustomErrorFactory)(formatMessage);\n    }\n\n    throw error\n  }\n}\n","/**\n * Determines if the current process is a Node.js process.\n */\nexport function isNodeProcess(): boolean {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return true\n  }\n\n  if (typeof process !== 'undefined') {\n    // Electron (https://www.electronjs.org/docs/latest/api/process#processtype-readonly)\n    const type = (process as any).type\n    if (type === 'renderer' || type === 'worker') {\n      return false\n    }\n\n\n    return !!(\n      process.versions &&\n      process.versions.node\n    )\n  }\n\n  return false\n}\n","export type AsyncTuple<\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n> =\n  | {\n      error: ErrorType\n      data: null\n    }\n  | { error: null; data: DataType }\n\n/**\n * Gracefully handles a given Promise factory.\n * @example\n * const { error, data } = await until(() => asyncAction())\n */\nexport const until = async <\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n>(\n  promise: () => Promise<DataType>,\n): Promise<AsyncTuple<ErrorType, DataType>> => {\n  try {\n    const data = await promise().catch((error) => {\n      throw error\n    })\n    return { error: null, data }\n  } catch (error) {\n    return { error, data: null }\n  }\n}\n","import { FindWorker } from '../../glossary'\n\n/**\n * Attempts to resolve a Service Worker instance from a given registration,\n * regardless of its state (active, installing, waiting).\n */\nexport function getWorkerByRegistration(\n  registration: ServiceWorkerRegistration,\n  absoluteWorkerUrl: string,\n  findWorker: FindWorker,\n): ServiceWorker | null {\n  const allStates = [\n    registration.active,\n    registration.installing,\n    registration.waiting,\n  ]\n  const relevantStates = allStates.filter((state): state is ServiceWorker => {\n    return state != null\n  })\n  const worker = relevantStates.find((worker) => {\n    return findWorker(worker.scriptURL, absoluteWorkerUrl)\n  })\n\n  return worker || null\n}\n","import { until } from '@open-draft/until'\nimport { devUtils } from '~/core/utils/internal/devUtils'\nimport { getAbsoluteWorkerUrl } from '../../../utils/getAbsoluteWorkerUrl'\nimport { getWorkerByRegistration } from './getWorkerByRegistration'\nimport { ServiceWorkerInstanceTuple, FindWorker } from '../../glossary'\n\n/**\n * Returns an active Service Worker instance.\n * When not found, registers a new Service Worker.\n */\nexport const getWorkerInstance = async (\n  url: string,\n  options: RegistrationOptions = {},\n  findWorker: FindWorker,\n): Promise<ServiceWorkerInstanceTuple> => {\n  // Resolve the absolute Service Worker URL.\n  const absoluteWorkerUrl = getAbsoluteWorkerUrl(url)\n\n  const mockRegistrations = await navigator.serviceWorker\n    .getRegistrations()\n    .then((registrations) =>\n      registrations.filter((registration) =>\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n      ),\n    )\n  if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {\n    // Reload the page when it has associated workers, but no active controller.\n    // The absence of a controller can mean either:\n    // - page has no Service Worker associated with it\n    // - page has been hard-reloaded and its workers won't be used until the next reload.\n    // Since we've checked that there are registrations associated with this page,\n    // at this point we are sure it's hard reload that falls into this clause.\n    location.reload()\n  }\n\n  const [existingRegistration] = mockRegistrations\n\n  if (existingRegistration) {\n    // When the Service Worker is registered, update it and return the reference.\n    return existingRegistration.update().then(() => {\n      return [\n        getWorkerByRegistration(\n          existingRegistration,\n          absoluteWorkerUrl,\n          findWorker,\n        ),\n        existingRegistration,\n      ]\n    })\n  }\n\n  // When the Service Worker wasn't found, register it anew and return the reference.\n  const registrationResult = await until<Error, ServiceWorkerInstanceTuple>(\n    async () => {\n      const registration = await navigator.serviceWorker.register(url, options)\n      return [\n        // Compare existing worker registration by its worker URL,\n        // to prevent irrelevant workers to resolve here (such as Codesandbox worker).\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n        registration,\n      ]\n    },\n  )\n\n  // Handle Service Worker registration errors.\n  if (registrationResult.error) {\n    const isWorkerMissing = registrationResult.error.message.includes('(404)')\n\n    // Produce a custom error message when given a non-existing Service Worker url.\n    // Suggest developers to check their setup.\n    if (isWorkerMissing) {\n      const scopeUrl = new URL(options?.scope || '/', location.href)\n\n      throw new Error(\n        devUtils.formatMessage(`\\\nFailed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.\n\nDid you forget to run \"npx msw init <PUBLIC_DIR>\"?\n\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`),\n      )\n    }\n\n    // Fallback error message for any other registration errors.\n    throw new Error(\n      devUtils.formatMessage(\n        'Failed to register the Service Worker:\\n\\n%s',\n        registrationResult.error.message,\n      ),\n    )\n  }\n\n  return registrationResult.data\n}\n","/**\n * Returns an absolute Service Worker URL based on the given\n * relative URL (known during the registration).\n */\nexport function getAbsoluteWorkerUrl(workerUrl: string): string {\n  return new URL(workerUrl, location.href).href\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\n\nexport interface PrintStartMessageArgs {\n  quiet?: boolean\n  message?: string\n  workerUrl?: string\n  workerScope?: string\n}\n\n/**\n * Prints a worker activation message in the browser's console.\n */\nexport function printStartMessage(args: PrintStartMessageArgs = {}) {\n  if (args.quiet) {\n    return\n  }\n\n  const message = args.message || 'Mocking enabled.'\n\n  console.groupCollapsed(\n    `%c${devUtils.formatMessage(message)}`,\n    'color:orangered;font-weight:bold;',\n  )\n  console.log(\n    '%cDocumentation: %chttps://mswjs.io/docs',\n    'font-weight:bold',\n    'font-weight:normal',\n  )\n  console.log('Found an issue? https://github.com/mswjs/msw/issues')\n\n  if (args.workerUrl) {\n    console.log('Worker script URL:', args.workerUrl)\n  }\n\n  if (args.workerScope) {\n    console.log('Worker scope:', args.workerScope)\n  }\n\n  console.groupEnd()\n}\n","import {\n  StringifiedResponse,\n  ServiceWorkerIncomingEventsMap,\n} from '../../glossary'\n\nexport interface ServiceWorkerMessage<\n  EventType extends keyof ServiceWorkerIncomingEventsMap,\n  EventPayload,\n> {\n  type: EventType\n  payload: EventPayload\n}\n\ninterface WorkerChannelEventsMap {\n  MOCK_RESPONSE: [\n    data: StringifiedResponse,\n    transfer?: [ReadableStream<Uint8Array>],\n  ]\n  PASSTHROUGH: []\n}\n\nexport class WorkerChannel {\n  constructor(private readonly port: MessagePort) {}\n\n  public postMessage<Event extends keyof WorkerChannelEventsMap>(\n    event: Event,\n    ...rest: WorkerChannelEventsMap[Event]\n  ): void {\n    const [data, transfer] = rest\n    this.port.postMessage({ type: event, data }, { transfer })\n  }\n}\n","import type { ServiceWorkerIncomingRequest } from '../setupWorker/glossary'\n\ntype Input = Pick<ServiceWorkerIncomingRequest, 'method' | 'body'>\n\n/**\n * Ensures that an empty GET request body is always represented as `undefined`.\n */\nexport function pruneGetRequestBody(\n  request: Input,\n): ServiceWorkerIncomingRequest['body'] {\n  // Force HEAD/GET request body to always be empty.\n  // The worker reads any request's body as ArrayBuffer,\n  // and you cannot re-construct a GET/HEAD Request\n  // with an ArrayBuffer, even if empty. Also note that\n  // \"request.body\" is always undefined in the worker.\n  if (['HEAD', 'GET'].includes(request.method)) {\n    return undefined\n  }\n\n  return request.body\n}\n","import {\n  StartOptions,\n  SetupWorkerInternalContext,\n  ServiceWorkerIncomingEventsMap,\n} from '../glossary'\nimport {\n  ServiceWorkerMessage,\n  WorkerChannel,\n} from './utils/createMessageChannel'\nimport { parseWorkerRequest } from '../../utils/parseWorkerRequest'\nimport { RequestHandler } from '~/core/handlers/RequestHandler'\nimport { handleRequest } from '~/core/utils/handleRequest'\nimport { RequiredDeep } from '~/core/typeUtils'\nimport { devUtils } from '~/core/utils/internal/devUtils'\nimport { toResponseInit } from '~/core/utils/toResponseInit'\n\nexport const createRequestListener = (\n  context: SetupWorkerInternalContext,\n  options: RequiredDeep<StartOptions>,\n) => {\n  return async (\n    event: MessageEvent,\n    message: ServiceWorkerMessage<\n      'REQUEST',\n      ServiceWorkerIncomingEventsMap['REQUEST']\n    >,\n  ) => {\n    const messageChannel = new WorkerChannel(event.ports[0])\n\n    const requestId = message.payload.id\n    const request = parseWorkerRequest(message.payload)\n    const requestCloneForLogs = request.clone()\n\n    // Make this the first requets clone before the\n    // request resolution pipeline even starts.\n    // Store the clone in cache so the first matching\n    // request handler would skip the cloning phase.\n    const requestClone = request.clone()\n    RequestHandler.cache.set(request, requestClone)\n    context.requests.set(requestId, requestClone)\n\n    try {\n      await handleRequest(\n        request,\n        requestId,\n        context.getRequestHandlers(),\n        options,\n        context.emitter,\n        {\n          onPassthroughResponse() {\n            messageChannel.postMessage('PASSTHROUGH')\n          },\n          async onMockedResponse(response, { handler, parsedResult }) {\n            // Clone the mocked response so its body could be read\n            // to buffer to be sent to the worker and also in the\n            // \".log()\" method of the request handler.\n            const responseClone = response.clone()\n            const responseCloneForLogs = response.clone()\n            const responseInit = toResponseInit(response)\n\n            /**\n             * @note Safari doesn't support transferring a \"ReadableStream\".\n             * Check that the browser supports that before sending it to the worker.\n             */\n            if (context.supports.readableStreamTransfer) {\n              const responseStreamOrNull = response.body\n\n              messageChannel.postMessage(\n                'MOCK_RESPONSE',\n                {\n                  ...responseInit,\n                  body: responseStreamOrNull,\n                },\n                responseStreamOrNull ? [responseStreamOrNull] : undefined,\n              )\n            } else {\n              /**\n               * @note If we are here, this means the current environment doesn't\n               * support \"ReadableStream\" as transferable. In that case,\n               * attempt to read the non-empty response body as ArrayBuffer, if it's not empty.\n               * @see https://github.com/mswjs/msw/issues/1827\n               */\n              const responseBufferOrNull =\n                response.body === null\n                  ? null\n                  : await responseClone.arrayBuffer()\n\n              messageChannel.postMessage('MOCK_RESPONSE', {\n                ...responseInit,\n                body: responseBufferOrNull,\n              })\n            }\n\n            if (!options.quiet) {\n              context.emitter.once('response:mocked', () => {\n                handler.log({\n                  request: requestCloneForLogs,\n                  response: responseCloneForLogs,\n                  parsedResult,\n                })\n              })\n            }\n          },\n        },\n      )\n    } catch (error) {\n      if (error instanceof Error) {\n        devUtils.error(\n          `Uncaught exception in the request handler for \"%s %s\":\n\n%s\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,\n          request.method,\n          request.url,\n          error.stack ?? error,\n        )\n\n        // Treat all other exceptions in a request handler as unintended,\n        // alerting that there is a problem that needs fixing.\n        messageChannel.postMessage('MOCK_RESPONSE', {\n          status: 500,\n          statusText: 'Request Handler Error',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          }),\n        })\n      }\n    }\n  }\n}\n","import { pruneGetRequestBody } from './pruneGetRequestBody'\nimport type { ServiceWorkerIncomingRequest } from '../setupWorker/glossary'\n\n/**\n * Converts a given request received from the Service Worker\n * into a Fetch `Request` instance.\n */\nexport function parseWorkerRequest(\n  incomingRequest: ServiceWorkerIncomingRequest,\n): Request {\n  return new Request(incomingRequest.url, {\n    ...incomingRequest,\n    body: pruneGetRequestBody(incomingRequest),\n  })\n}\n","export function toResponseInit(response: Response): ResponseInit {\n  return {\n    status: response.status,\n    statusText: response.statusText,\n    headers: Object.fromEntries(response.headers.entries()),\n  }\n}\n","const encoder = new TextEncoder()\n\nexport function encodeBuffer(text: string): Uint8Array {\n  return encoder.encode(text)\n}\n\nexport function decodeBuffer(buffer: ArrayBuffer, encoding?: string): string {\n  const decoder = new TextDecoder(encoding)\n  return decoder.decode(buffer)\n}\n\n/**\n * Create an `ArrayBuffer` from the given `Uint8Array`.\n * Takes the byte offset into account to produce the right buffer\n * in the case when the buffer is bigger than the data view.\n */\nexport function toArrayBuffer(array: Uint8Array): ArrayBuffer {\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteOffset + array.byteLength\n  )\n}\n","/**\n * Response status codes for responses that cannot have body.\n * @see https://fetch.spec.whatwg.org/#statuses\n */\nexport const RESPONSE_STATUS_CODES_WITHOUT_BODY = new Set([\n  101, 103, 204, 205, 304,\n])\n\n/**\n * Returns a boolean indicating whether the given response status\n * code represents a response that cannot have a body.\n */\nexport function isResponseWithoutBody(status: number): boolean {\n  return RESPONSE_STATUS_CODES_WITHOUT_BODY.has(status)\n}\n","import type { InteractiveRequest } from './utils/toInteractiveRequest'\n\nexport const IS_PATCHED_MODULE: unique symbol = Symbol('isPatchedModule')\n\nexport type RequestCredentials = 'omit' | 'include' | 'same-origin'\n\nexport type HttpRequestEventMap = {\n  request: [\n    args: {\n      request: InteractiveRequest\n      requestId: string\n    }\n  ]\n  response: [\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ]\n}\n","var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/index.ts\nimport { isNodeProcess } from \"is-node-process\";\nimport { format } from \"outvariant\";\n\n// src/colors.ts\nvar colors_exports = {};\n__export(colors_exports, {\n  blue: () => blue,\n  gray: () => gray,\n  green: () => green,\n  red: () => red,\n  yellow: () => yellow\n});\nfunction yellow(text) {\n  return `\\x1B[33m${text}\\x1B[0m`;\n}\nfunction blue(text) {\n  return `\\x1B[34m${text}\\x1B[0m`;\n}\nfunction gray(text) {\n  return `\\x1B[90m${text}\\x1B[0m`;\n}\nfunction red(text) {\n  return `\\x1B[31m${text}\\x1B[0m`;\n}\nfunction green(text) {\n  return `\\x1B[32m${text}\\x1B[0m`;\n}\n\n// src/index.ts\nvar IS_NODE = isNodeProcess();\nvar Logger = class {\n  constructor(name) {\n    this.name = name;\n    this.prefix = `[${this.name}]`;\n    const LOGGER_NAME = getVariable(\"DEBUG\");\n    const LOGGER_LEVEL = getVariable(\"LOG_LEVEL\");\n    const isLoggingEnabled = LOGGER_NAME === \"1\" || LOGGER_NAME === \"true\" || typeof LOGGER_NAME !== \"undefined\" && this.name.startsWith(LOGGER_NAME);\n    if (isLoggingEnabled) {\n      this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, \"debug\") ? noop : this.debug;\n      this.info = isDefinedAndNotEquals(LOGGER_LEVEL, \"info\") ? noop : this.info;\n      this.success = isDefinedAndNotEquals(LOGGER_LEVEL, \"success\") ? noop : this.success;\n      this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, \"warning\") ? noop : this.warning;\n      this.error = isDefinedAndNotEquals(LOGGER_LEVEL, \"error\") ? noop : this.error;\n    } else {\n      this.info = noop;\n      this.success = noop;\n      this.warning = noop;\n      this.error = noop;\n      this.only = noop;\n    }\n  }\n  prefix;\n  extend(domain) {\n    return new Logger(`${this.name}:${domain}`);\n  }\n  /**\n   * Print a debug message.\n   * @example\n   * logger.debug('no duplicates found, creating a document...')\n   */\n  debug(message, ...positionals) {\n    this.logEntry({\n      level: \"debug\",\n      message: gray(message),\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"gray\"\n      }\n    });\n  }\n  /**\n   * Print an info message.\n   * @example\n   * logger.info('start parsing...')\n   */\n  info(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"blue\"\n      }\n    });\n    const performance2 = new PerformanceEntry();\n    return (message2, ...positionals2) => {\n      performance2.measure();\n      this.logEntry({\n        level: \"info\",\n        message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,\n        positionals: positionals2,\n        prefix: this.prefix,\n        colors: {\n          prefix: \"blue\"\n        }\n      });\n    };\n  }\n  /**\n   * Print a success message.\n   * @example\n   * logger.success('successfully created document')\n   */\n  success(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: `\\u2714 ${this.prefix}`,\n      colors: {\n        timestamp: \"green\",\n        prefix: \"green\"\n      }\n    });\n  }\n  /**\n   * Print a warning.\n   * @example\n   * logger.warning('found legacy document format')\n   */\n  warning(message, ...positionals) {\n    this.logEntry({\n      level: \"warning\",\n      message,\n      positionals,\n      prefix: `\\u26A0 ${this.prefix}`,\n      colors: {\n        timestamp: \"yellow\",\n        prefix: \"yellow\"\n      }\n    });\n  }\n  /**\n   * Print an error message.\n   * @example\n   * logger.error('something went wrong')\n   */\n  error(message, ...positionals) {\n    this.logEntry({\n      level: \"error\",\n      message,\n      positionals,\n      prefix: `\\u2716 ${this.prefix}`,\n      colors: {\n        timestamp: \"red\",\n        prefix: \"red\"\n      }\n    });\n  }\n  /**\n   * Execute the given callback only when the logging is enabled.\n   * This is skipped in its entirety and has no runtime cost otherwise.\n   * This executes regardless of the log level.\n   * @example\n   * logger.only(() => {\n   *   logger.info('additional info')\n   * })\n   */\n  only(callback) {\n    callback();\n  }\n  createEntry(level, message) {\n    return {\n      timestamp: /* @__PURE__ */ new Date(),\n      level,\n      message\n    };\n  }\n  logEntry(args) {\n    const {\n      level,\n      message,\n      prefix,\n      colors: customColors,\n      positionals = []\n    } = args;\n    const entry = this.createEntry(level, message);\n    const timestampColor = customColors?.timestamp || \"gray\";\n    const prefixColor = customColors?.prefix || \"gray\";\n    const colorize = {\n      timestamp: colors_exports[timestampColor],\n      prefix: colors_exports[prefixColor]\n    };\n    const write = this.getWriter(level);\n    write(\n      [colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(\" \"),\n      ...positionals.map(serializeInput)\n    );\n  }\n  formatTimestamp(timestamp) {\n    return `${timestamp.toLocaleTimeString(\n      \"en-GB\"\n    )}:${timestamp.getMilliseconds()}`;\n  }\n  getWriter(level) {\n    switch (level) {\n      case \"debug\":\n      case \"success\":\n      case \"info\": {\n        return log;\n      }\n      case \"warning\": {\n        return warn;\n      }\n      case \"error\": {\n        return error;\n      }\n    }\n  }\n};\nvar PerformanceEntry = class {\n  startTime;\n  endTime;\n  deltaTime;\n  constructor() {\n    this.startTime = performance.now();\n  }\n  measure() {\n    this.endTime = performance.now();\n    const deltaTime = this.endTime - this.startTime;\n    this.deltaTime = deltaTime.toFixed(2);\n  }\n};\nvar noop = () => void 0;\nfunction log(message, ...positionals) {\n  if (IS_NODE) {\n    process.stdout.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.log(message, ...positionals);\n}\nfunction warn(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.warn(message, ...positionals);\n}\nfunction error(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.error(message, ...positionals);\n}\nfunction getVariable(variableName) {\n  if (IS_NODE) {\n    return process.env[variableName];\n  }\n  return globalThis[variableName]?.toString();\n}\nfunction isDefinedAndNotEquals(value, expected) {\n  return value !== void 0 && value !== expected;\n}\nfunction serializeInput(message) {\n  if (typeof message === \"undefined\") {\n    return \"undefined\";\n  }\n  if (message === null) {\n    return \"null\";\n  }\n  if (typeof message === \"string\") {\n    return message;\n  }\n  if (typeof message === \"object\") {\n    return JSON.stringify(message);\n  }\n  return message.toString();\n}\nexport {\n  Logger\n};\n","import type { Emitter } from './Emitter'\n\nexport class MemoryLeakError extends Error {\n  constructor(\n    public readonly emitter: Emitter<any>,\n    public readonly type: string | number | symbol,\n    public readonly count: number\n  ) {\n    super(\n      `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`\n    )\n    this.name = 'MaxListenersExceededWarning'\n  }\n}\n","import { MemoryLeakError } from './MemoryLeakError'\n\nexport type EventMap = {\n  [eventName: string]: Array<unknown>\n}\n\nexport type InternalEventNames = 'newListener' | 'removeListener'\n\nexport type InternalListener<Events extends EventMap> = Listener<\n  [eventName: keyof Events, listener: Listener<Array<unknown>>]\n>\n\nexport type Listener<Data extends Array<unknown>> = (...data: Data) => void\n\n/**\n * Node.js-compatible implementation of `EventEmitter`.\n *\n * @example\n * const emitter = new Emitter<{ hello: [string] }>()\n * emitter.on('hello', (name) => console.log(name))\n * emitter.emit('hello', 'John')\n */\nexport class Emitter<Events extends EventMap> {\n  private events: Map<keyof Events, Array<Listener<any>>>\n  private maxListeners: number\n  private hasWarnedAboutPotentialMemoryLeak: boolean\n\n  static defaultMaxListeners = 10\n\n  static listenerCount<Events extends EventMap>(\n    emitter: Emitter<EventMap>,\n    eventName: keyof Events\n  ): number {\n    return emitter.listenerCount<any>(eventName)\n  }\n\n  constructor() {\n    this.events = new Map()\n    this.maxListeners = Emitter.defaultMaxListeners\n    this.hasWarnedAboutPotentialMemoryLeak = false\n  }\n\n  private _emitInternalEvent(\n    internalEventName: InternalEventNames,\n    eventName: keyof Events,\n    listener: Listener<Array<unknown>>\n  ): void {\n    this.emit(\n      internalEventName,\n      // Anything to make TypeScript happy.\n      ...([eventName, listener] as Events['newListener'] &\n        Events['removeListener'])\n    )\n  }\n\n  private _getListeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Array<unknown>>> {\n    // Always return a copy of the listeners array\n    // so they are fixed at the time of the \"_getListeners\" call.\n    return Array.prototype.concat.apply([], this.events.get(eventName)) || []\n  }\n\n  private _removeListener<EventName extends keyof Events>(\n    listeners: Array<Listener<Events[EventName]>>,\n    listener: Listener<Events[EventName]>\n  ): Array<Listener<Events[EventName]>> {\n    const index = listeners.indexOf(listener)\n\n    if (index > -1) {\n      listeners.splice(index, 1)\n    }\n\n    return []\n  }\n\n  private _wrapOnceListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): Listener<Events[EventName]> {\n    const onceListener = (...data: Events[keyof Events]) => {\n      this.removeListener(eventName, onceListener)\n\n      /**\n       * @note Return the result of the original listener.\n       * This way this wrapped preserves listeners that are async.\n       */\n      return listener.apply(this, data)\n    }\n\n    // Inherit the name of the original listener.\n    Object.defineProperty(onceListener, 'name', { value: listener.name })\n\n    return onceListener\n  }\n\n  public setMaxListeners(maxListeners: number): this {\n    this.maxListeners = maxListeners\n    return this\n  }\n\n  /**\n   * Returns the current max listener value for the `Emitter` which is\n   * either set by `emitter.setMaxListeners(n)` or defaults to\n   * `Emitter.defaultMaxListeners`.\n   */\n  public getMaxListeners(): number {\n    return this.maxListeners\n  }\n\n  /**\n   * Returns an array listing the events for which the emitter has registered listeners.\n   * The values in the array will be strings or Symbols.\n   */\n  public eventNames(): Array<keyof Events> {\n    return Array.from(this.events.keys())\n  }\n\n  /**\n   * Synchronously calls each of the listeners registered for the event named `eventName`,\n   * in the order they were registered, passing the supplied arguments to each.\n   * Returns `true` if the event has listeners, `false` otherwise.\n   *\n   * @example\n   * const emitter = new Emitter<{ hello: [string] }>()\n   * emitter.emit('hello', 'John')\n   */\n  public emit<EventName extends keyof Events>(\n    eventName: EventName,\n    ...data: Events[EventName]\n  ): boolean {\n    const listeners = this._getListeners(eventName)\n    listeners.forEach((listener) => {\n      listener.apply(this, data)\n    })\n\n    return listeners.length > 0\n  }\n\n  public addListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public addListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public addListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: InternalListener<Events> | Listener<Events[any]>\n  ): this {\n    // Emit the `newListener` event before adding the listener.\n    this._emitInternalEvent('newListener', eventName, listener)\n\n    const nextListeners = this._getListeners(eventName).concat(listener)\n    this.events.set(eventName, nextListeners)\n\n    if (\n      this.maxListeners > 0 &&\n      this.listenerCount(eventName) > this.maxListeners &&\n      !this.hasWarnedAboutPotentialMemoryLeak\n    ) {\n      this.hasWarnedAboutPotentialMemoryLeak = true\n\n      const memoryLeakWarning = new MemoryLeakError(\n        this,\n        eventName,\n        this.listenerCount(eventName)\n      )\n      console.warn(memoryLeakWarning)\n    }\n\n    return this\n  }\n\n  public on(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public on<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public on<EventName extends keyof Events>(\n    eventName: 'removeListener' | EventName,\n    listener: Listener<any>\n  ): this {\n    return this.addListener(eventName, listener)\n  }\n\n  public once(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public once<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public once<EventName extends keyof Events>(\n    eventName: InternalEventNames | EventName,\n    listener: Listener<any>\n  ): this {\n    return this.addListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    )\n  }\n\n  public prependListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public prependListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public prependListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    const listeners = this._getListeners(eventName)\n\n    if (listeners.length > 0) {\n      const nextListeners = [listener].concat(listeners)\n      this.events.set(eventName, nextListeners)\n    } else {\n      this.events.set(eventName, listeners.concat(listener))\n    }\n\n    return this\n  }\n\n  public prependOnceListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public prependOnceListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public prependOnceListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    return this.prependListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    )\n  }\n\n  public removeListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public removeListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public removeListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    const listeners = this._getListeners(eventName)\n\n    if (listeners.length > 0) {\n      this._removeListener(listeners, listener)\n      this.events.set(eventName, listeners)\n\n      // Emit the `removeListener` event after removing the listener.\n      this._emitInternalEvent('removeListener', eventName, listener)\n    }\n\n    return this\n  }\n\n  public off(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public off<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  /**\n   * Alias for `emitter.removeListener()`.\n   *\n   * @example\n   * emitter.off('hello', listener)\n   */\n  public off(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    return this.removeListener(eventName, listener)\n  }\n\n  public removeAllListeners(eventName?: InternalEventNames): this\n  public removeAllListeners<EventName extends keyof Events>(\n    eventName?: EventName\n  ): this\n  public removeAllListeners(\n    eventName?: InternalEventNames | keyof Events\n  ): this {\n    if (eventName) {\n      this.events.delete(eventName)\n    } else {\n      this.events.clear()\n    }\n\n    return this\n  }\n\n  public listeners(eventName: InternalEventNames): Array<Listener<any>>\n  public listeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Events[EventName]>>\n  /**\n   * Returns a copy of the array of listeners for the event named `eventName`.\n   */\n  public listeners(eventName: InternalEventNames | keyof Events) {\n    return Array.from(this._getListeners(eventName))\n  }\n\n  public listenerCount(eventName: InternalEventNames): number\n  public listenerCount<EventName extends keyof Events>(\n    eventName: EventName\n  ): number\n  /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   */\n  public listenerCount(eventName: InternalEventNames | keyof Events): number {\n    return this._getListeners(eventName).length\n  }\n\n  public rawListeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Events[EventName]>> {\n    return this.listeners(eventName)\n  }\n}\n","import { Logger } from '@open-draft/logger'\nimport { Emitter, Listener } from 'strict-event-emitter'\n\nexport type InterceptorEventMap = Record<string, any>\nexport type InterceptorSubscription = () => void\n\n/**\n * Request header name to detect when a single request\n * is being handled by nested interceptors (XHR -> ClientRequest).\n * Obscure by design to prevent collisions with user-defined headers.\n * Ideally, come up with the Interceptor-level mechanism for this.\n * @see https://github.com/mswjs/interceptors/issues/378\n */\nexport const INTERNAL_REQUEST_ID_HEADER_NAME =\n  'x-interceptors-internal-request-id'\n\nexport function getGlobalSymbol<V>(symbol: Symbol): V | undefined {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || undefined\n  )\n}\n\nfunction setGlobalSymbol(symbol: Symbol, value: any): void {\n  // @ts-ignore\n  globalThis[symbol] = value\n}\n\nexport function deleteGlobalSymbol(symbol: Symbol): void {\n  // @ts-ignore\n  delete globalThis[symbol]\n}\n\nexport enum InterceptorReadyState {\n  INACTIVE = 'INACTIVE',\n  APPLYING = 'APPLYING',\n  APPLIED = 'APPLIED',\n  DISPOSING = 'DISPOSING',\n  DISPOSED = 'DISPOSED',\n}\n\nexport type ExtractEventNames<Events extends Record<string, any>> =\n  Events extends Record<infer EventName, any> ? EventName : never\n\nexport class Interceptor<Events extends InterceptorEventMap> {\n  protected emitter: Emitter<Events>\n  protected subscriptions: Array<InterceptorSubscription>\n  protected logger: Logger\n\n  public readyState: InterceptorReadyState\n\n  constructor(private readonly symbol: symbol) {\n    this.readyState = InterceptorReadyState.INACTIVE\n\n    this.emitter = new Emitter()\n    this.subscriptions = []\n    this.logger = new Logger(symbol.description!)\n\n    // Do not limit the maximum number of listeners\n    // so not to limit the maximum amount of parallel events emitted.\n    this.emitter.setMaxListeners(0)\n\n    this.logger.info('constructing the interceptor...')\n  }\n\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  protected checkEnvironment(): boolean {\n    return true\n  }\n\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  public apply(): void {\n    const logger = this.logger.extend('apply')\n    logger.info('applying the interceptor...')\n\n    if (this.readyState === InterceptorReadyState.APPLIED) {\n      logger.info('intercepted already applied!')\n      return\n    }\n\n    const shouldApply = this.checkEnvironment()\n\n    if (!shouldApply) {\n      logger.info('the interceptor cannot be applied in this environment!')\n      return\n    }\n\n    this.readyState = InterceptorReadyState.APPLYING\n\n    // Whenever applying a new interceptor, check if it hasn't been applied already.\n    // This enables to apply the same interceptor multiple times, for example from a different\n    // interceptor, only proxying events but keeping the stubs in a single place.\n    const runningInstance = this.getInstance()\n\n    if (runningInstance) {\n      logger.info('found a running instance, reusing...')\n\n      // Proxy any listeners you set on this instance to the running instance.\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event)\n\n        // Add listeners to the running instance so they appear\n        // at the top of the event listeners list and are executed first.\n        runningInstance.emitter.addListener(event, listener)\n\n        // Ensure that once this interceptor instance is disposed,\n        // it removes all listeners it has appended to the running interceptor instance.\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener)\n          logger.info('removed proxied \"%s\" listener!', event)\n        })\n\n        return this\n      }\n\n      this.readyState = InterceptorReadyState.APPLIED\n\n      return\n    }\n\n    logger.info('no running instance found, setting up a new instance...')\n\n    // Setup the interceptor.\n    this.setup()\n\n    // Store the newly applied interceptor instance globally.\n    this.setInstance()\n\n    this.readyState = InterceptorReadyState.APPLIED\n  }\n\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  protected setup(): void {}\n\n  /**\n   * Listen to the interceptor's public events.\n   */\n  public on<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    const logger = this.logger.extend('on')\n\n    if (\n      this.readyState === InterceptorReadyState.DISPOSING ||\n      this.readyState === InterceptorReadyState.DISPOSED\n    ) {\n      logger.info('cannot listen to events, already disposed!')\n      return this\n    }\n\n    logger.info('adding \"%s\" event listener:', event, listener)\n\n    this.emitter.on(event, listener)\n    return this\n  }\n\n  public once<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    this.emitter.once(event, listener)\n    return this\n  }\n\n  public off<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    this.emitter.off(event, listener)\n    return this\n  }\n\n  public removeAllListeners<EventName extends ExtractEventNames<Events>>(\n    event?: EventName\n  ): this {\n    this.emitter.removeAllListeners(event)\n    return this\n  }\n\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  public dispose(): void {\n    const logger = this.logger.extend('dispose')\n\n    if (this.readyState === InterceptorReadyState.DISPOSED) {\n      logger.info('cannot dispose, already disposed!')\n      return\n    }\n\n    logger.info('disposing the interceptor...')\n    this.readyState = InterceptorReadyState.DISPOSING\n\n    if (!this.getInstance()) {\n      logger.info('no interceptors running, skipping dispose...')\n      return\n    }\n\n    // Delete the global symbol as soon as possible,\n    // indicating that the interceptor is no longer running.\n    this.clearInstance()\n\n    logger.info('global symbol deleted:', getGlobalSymbol(this.symbol))\n\n    if (this.subscriptions.length > 0) {\n      logger.info('disposing of %d subscriptions...', this.subscriptions.length)\n\n      for (const dispose of this.subscriptions) {\n        dispose()\n      }\n\n      this.subscriptions = []\n\n      logger.info('disposed of all subscriptions!', this.subscriptions.length)\n    }\n\n    this.emitter.removeAllListeners()\n    logger.info('destroyed the listener!')\n\n    this.readyState = InterceptorReadyState.DISPOSED\n  }\n\n  private getInstance(): this | undefined {\n    const instance = getGlobalSymbol<this>(this.symbol)\n    this.logger.info('retrieved global instance:', instance?.constructor?.name)\n    return instance\n  }\n\n  private setInstance(): void {\n    setGlobalSymbol(this.symbol, this)\n    this.logger.info('set global instance!', this.symbol.description)\n  }\n\n  private clearInstance(): void {\n    deleteGlobalSymbol(this.symbol)\n    this.logger.info('cleared global instance!', this.symbol.description)\n  }\n}\n","/**\n * Generate a random ID string to represent a request.\n * @example\n * createRequestId()\n * // \"f774b6c9c600f\"\n */\nexport function createRequestId(): string {\n  return Math.random().toString(16).slice(2)\n}\n","import { EventMap, Listener } from 'strict-event-emitter'\nimport { Interceptor, ExtractEventNames } from './Interceptor'\n\nexport interface BatchInterceptorOptions<\n  InterceptorList extends ReadonlyArray<Interceptor<any>>\n> {\n  name: string\n  interceptors: InterceptorList\n}\n\nexport type ExtractEventMapType<\n  InterceptorList extends ReadonlyArray<Interceptor<any>>\n> = InterceptorList extends ReadonlyArray<infer InterceptorType>\n  ? InterceptorType extends Interceptor<infer EventMap>\n    ? EventMap\n    : never\n  : never\n\n/**\n * A batch interceptor that exposes a single interface\n * to apply and operate with multiple interceptors at once.\n */\nexport class BatchInterceptor<\n  InterceptorList extends ReadonlyArray<Interceptor<any>>,\n  Events extends EventMap = ExtractEventMapType<InterceptorList>\n> extends Interceptor<Events> {\n  static symbol: symbol\n\n  private interceptors: InterceptorList\n\n  constructor(options: BatchInterceptorOptions<InterceptorList>) {\n    BatchInterceptor.symbol = Symbol(options.name)\n    super(BatchInterceptor.symbol)\n    this.interceptors = options.interceptors\n  }\n\n  protected setup() {\n    const logger = this.logger.extend('setup')\n\n    logger.info('applying all %d interceptors...', this.interceptors.length)\n\n    for (const interceptor of this.interceptors) {\n      logger.info('applying \"%s\" interceptor...', interceptor.constructor.name)\n      interceptor.apply()\n\n      logger.info('adding interceptor dispose subscription')\n      this.subscriptions.push(() => interceptor.dispose())\n    }\n  }\n\n  public on<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    // Instead of adding a listener to the batch interceptor,\n    // propagate the listener to each of the individual interceptors.\n    for (const interceptor of this.interceptors) {\n      interceptor.on(event, listener)\n    }\n\n    return this\n  }\n\n  public once<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    for (const interceptor of this.interceptors) {\n      interceptor.once(event, listener)\n    }\n\n    return this\n  }\n\n  public off<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    for (const interceptor of this.interceptors) {\n      interceptor.off(event, listener)\n    }\n\n    return this\n  }\n\n  public removeAllListeners<EventName extends ExtractEventNames<Events>>(\n    event?: EventName | undefined\n  ): this {\n    for (const interceptors of this.interceptors) {\n      interceptors.removeAllListeners(event)\n    }\n\n    return this\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { getWorkerInstance } from './utils/getWorkerInstance'\nimport { enableMocking } from './utils/enableMocking'\nimport { SetupWorkerInternalContext, StartHandler } from '../glossary'\nimport { createRequestListener } from './createRequestListener'\nimport { checkWorkerIntegrity } from '../../utils/checkWorkerIntegrity'\nimport { createResponseListener } from './createResponseListener'\nimport { validateWorkerScope } from './utils/validateWorkerScope'\n\nexport const createStartHandler = (\n  context: SetupWorkerInternalContext,\n): StartHandler => {\n  return function start(options, customOptions) {\n    const startWorkerInstance = async () => {\n      // Remove all previously existing event listeners.\n      // This way none of the listeners persists between Fast refresh\n      // of the application's code.\n      context.events.removeAllListeners()\n\n      // Handle requests signaled by the worker.\n      context.workerChannel.on(\n        'REQUEST',\n        createRequestListener(context, options),\n      )\n\n      // Handle responses signaled by the worker.\n      context.workerChannel.on('RESPONSE', createResponseListener(context))\n\n      const instance = await getWorkerInstance(\n        options.serviceWorker.url,\n        options.serviceWorker.options,\n        options.findWorker,\n      )\n\n      const [worker, registration] = instance\n\n      if (!worker) {\n        const missingWorkerMessage = customOptions?.findWorker\n          ? devUtils.formatMessage(\n              `Failed to locate the Service Worker registration using a custom \"findWorker\" predicate.\n\nPlease ensure that the custom predicate properly locates the Service Worker registration at \"%s\".\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\n`,\n              options.serviceWorker.url,\n            )\n          : devUtils.formatMessage(\n              `Failed to locate the Service Worker registration.\n\nThis most likely means that the worker script URL \"%s\" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.\n\nPlease consider using a custom \"serviceWorker.url\" option to point to the actual worker script location, or a custom \"findWorker\" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,\n              options.serviceWorker.url,\n              location.host,\n            )\n\n        throw new Error(missingWorkerMessage)\n      }\n\n      context.worker = worker\n      context.registration = registration\n\n      context.events.addListener(window, 'beforeunload', () => {\n        if (worker.state !== 'redundant') {\n          // Notify the Service Worker that this client has closed.\n          // Internally, it's similar to disabling the mocking, only\n          // client close event has a handler that self-terminates\n          // the Service Worker when there are no open clients.\n          context.workerChannel.send('CLIENT_CLOSED')\n        }\n        // Make sure we're always clearing the interval - there are reports that not doing this can\n        // cause memory leaks in headless browser environments.\n        window.clearInterval(context.keepAliveInterval)\n      })\n\n      // Check if the active Service Worker has been generated\n      // by the currently installed version of MSW.\n      await checkWorkerIntegrity(context).catch((error) => {\n        devUtils.error(\n          'Error while checking the worker script integrity. Please report this on GitHub (https://github.com/mswjs/msw/issues), including the original error below.',\n        )\n        console.error(error)\n      })\n\n      context.keepAliveInterval = window.setInterval(\n        () => context.workerChannel.send('KEEPALIVE_REQUEST'),\n        5000,\n      )\n\n      // Warn the user when loading the page that lies outside\n      // of the worker's scope.\n      validateWorkerScope(registration, context.startOptions)\n\n      return registration\n    }\n\n    const workerRegistration = startWorkerInstance().then(\n      async (registration) => {\n        const pendingInstance = registration.installing || registration.waiting\n\n        // Wait until the worker is activated.\n        // Assume the worker is already activated if there's no pending registration\n        // (i.e. when reloading the page after a successful activation).\n        if (pendingInstance) {\n          await new Promise<void>((resolve) => {\n            pendingInstance.addEventListener('statechange', () => {\n              if (pendingInstance.state === 'activated') {\n                return resolve()\n              }\n            })\n          })\n        }\n\n        // Print the activation message only after the worker has been activated.\n        await enableMocking(context, options).catch((error) => {\n          throw new Error(`Failed to enable mocking: ${error?.message}`)\n        })\n\n        return registration\n      },\n    )\n\n    return workerRegistration\n  }\n}\n","import type {\n  ServiceWorkerIncomingEventsMap,\n  SetupWorkerInternalContext,\n} from '../glossary'\nimport type { ServiceWorkerMessage } from './utils/createMessageChannel'\nimport { isResponseWithoutBody } from '@mswjs/interceptors'\n\nexport function createResponseListener(context: SetupWorkerInternalContext) {\n  return (\n    _: MessageEvent,\n    message: ServiceWorkerMessage<\n      'RESPONSE',\n      ServiceWorkerIncomingEventsMap['RESPONSE']\n    >,\n  ) => {\n    const { payload: responseJson } = message\n\n    // Get the Request instance reference stored in the\n    // request listener.\n    const { requestId } = responseJson\n    const request = context.requests.get(requestId)!\n    context.requests.delete(requestId)\n\n    /**\n     * CORS requests with `mode: \"no-cors\"` result in \"opaque\" responses.\n     * That kind of responses cannot be manipulated in JavaScript due\n     * to the security considerations.\n     * @see https://fetch.spec.whatwg.org/#concept-filtered-response-opaque\n     * @see https://github.com/mswjs/msw/issues/529\n     */\n    if (responseJson.type?.includes('opaque')) {\n      return\n    }\n\n    const response =\n      responseJson.status === 0\n        ? Response.error()\n        : new Response(\n            /**\n             * Responses may be streams here, but when we create a response object\n             * with null-body status codes, like 204, 205, 304 Response will\n             * throw when passed a non-null body, so ensure it's null here\n             * for those codes\n             */\n            isResponseWithoutBody(responseJson.status)\n              ? null\n              : responseJson.body,\n            responseJson,\n          )\n\n    /**\n     * Set response URL if it's not set already.\n     * @see https://github.com/mswjs/msw/issues/2030\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Response/url\n     */\n    if (!response.url) {\n      Object.defineProperty(response, 'url', {\n        value: request.url,\n        enumerable: true,\n        writable: false,\n      })\n    }\n\n    context.emitter.emit(\n      responseJson.isMockedResponse ? 'response:mocked' : 'response:bypass',\n      {\n        response,\n        request,\n        requestId: responseJson.requestId,\n      },\n    )\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport type { SetupWorkerInternalContext } from '../setupWorker/glossary'\n\n/**\n * Check whether the registered Service Worker has been\n * generated by the installed version of the library.\n * Prints a warning message if the worker scripts mismatch.\n */\nexport async function checkWorkerIntegrity(\n  context: SetupWorkerInternalContext,\n): Promise<void> {\n  // Request the integrity checksum from the registered worker.\n  context.workerChannel.send('INTEGRITY_CHECK_REQUEST')\n\n  const { payload } = await context.events.once('INTEGRITY_CHECK_RESPONSE')\n\n  // Compare the response from the Service Worker and the\n  // global variable set during the build.\n\n  // The integrity is validated based on the worker script's checksum\n  // that's derived from its minified content during the build.\n  // The \"SERVICE_WORKER_CHECKSUM\" global variable is injected by the build.\n  if (payload.checksum !== SERVICE_WORKER_CHECKSUM) {\n    devUtils.warn(\n      `The currently registered Service Worker has been generated by a different version of MSW (${payload.packageVersion}) and may not be fully compatible with the installed version.\n\nIt's recommended you update your worker script by running this command:\n\n  \\u2022 npx msw init <PUBLIC_DIR>\n\nYou can also automate this process and make the worker script update automatically upon the library installations. Read more: https://mswjs.io/docs/cli/init.`,\n    )\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { StartOptions } from '../../glossary'\n\nexport function validateWorkerScope(\n  registration: ServiceWorkerRegistration,\n  options?: StartOptions,\n): void {\n  if (!options?.quiet && !location.href.startsWith(registration.scope)) {\n    devUtils.warn(\n      `\\\nCannot intercept requests on this page because it's outside of the worker's scope (\"${registration.scope}\"). If you wish to mock API requests on this page, you must resolve this scope issue.\n\n- (Recommended) Register the worker at the root level (\"/\") of your application.\n- Set the \"Service-Worker-Allowed\" response header to allow out-of-scope workers.\\\n`,\n    )\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { StartOptions, SetupWorkerInternalContext } from '../../glossary'\nimport { printStartMessage } from './printStartMessage'\n\n/**\n * Signals the worker to enable the interception of requests.\n */\nexport async function enableMocking(\n  context: SetupWorkerInternalContext,\n  options: StartOptions,\n) {\n  context.workerChannel.send('MOCK_ACTIVATE')\n  await context.events.once('MOCKING_ENABLED')\n\n  // Warn the developer on multiple \"worker.start()\" calls.\n  // While this will not affect the worker in any way,\n  // it likely indicates an issue with the developer's code.\n  if (context.isMockingEnabled) {\n    devUtils.warn(\n      `Found a redundant \"worker.start()\" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this \"worker.start()\" call.`,\n    )\n    return\n  }\n\n  context.isMockingEnabled = true\n\n  printStartMessage({\n    quiet: options.quiet,\n    workerScope: context.registration?.scope,\n    workerUrl: context.worker?.scriptURL,\n  })\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\n\nexport function printStopMessage(args: { quiet?: boolean } = {}): void {\n  if (args.quiet) {\n    return\n  }\n\n  console.log(\n    `%c${devUtils.formatMessage('Mocking disabled.')}`,\n    'color:orangered;font-weight:bold;',\n  )\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { SetupWorkerInternalContext, StopHandler } from '../glossary'\nimport { printStopMessage } from './utils/printStopMessage'\n\nexport const createStop = (\n  context: SetupWorkerInternalContext,\n): StopHandler => {\n  return function stop() {\n    // Warn developers calling \"worker.stop()\" more times than necessary.\n    // This likely indicates a mistake in their code.\n    if (!context.isMockingEnabled) {\n      devUtils.warn(\n        'Found a redundant \"worker.stop()\" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this \"worker.stop()\" call.',\n      )\n      return\n    }\n\n    /**\n     * Signal the Service Worker to disable mocking for this client.\n     * Use this an an explicit way to stop the mocking, while preserving\n     * the worker-client relation. Does not affect the worker's lifecycle.\n     */\n    context.workerChannel.send('MOCK_DEACTIVATE')\n    context.isMockingEnabled = false\n    window.clearInterval(context.keepAliveInterval)\n\n    printStopMessage({ quiet: context.startOptions?.quiet })\n  }\n}\n","import { RequiredDeep } from '~/core/typeUtils'\nimport { mergeRight } from '~/core/utils/internal/mergeRight'\nimport {\n  SetupWorker,\n  SetupWorkerInternalContext,\n  StartHandler,\n  StartOptions,\n} from '../../glossary'\n\nexport const DEFAULT_START_OPTIONS: RequiredDeep<StartOptions> = {\n  serviceWorker: {\n    url: '/mockServiceWorker.js',\n    options: null as any,\n  },\n  quiet: false,\n  waitUntilReady: true,\n  onUnhandledRequest: 'warn',\n  findWorker(scriptURL, mockServiceWorkerUrl) {\n    return scriptURL === mockServiceWorkerUrl\n  },\n}\n\n/**\n * Returns resolved worker start options, merging the default options\n * with the given custom options.\n */\nexport function resolveStartOptions(\n  initialOptions?: StartOptions,\n): RequiredDeep<StartOptions> {\n  return mergeRight(\n    DEFAULT_START_OPTIONS,\n    initialOptions || {},\n  ) as RequiredDeep<StartOptions>\n}\n\nexport function prepareStartHandler(\n  handler: StartHandler,\n  context: SetupWorkerInternalContext,\n): SetupWorker['start'] {\n  return (initialOptions) => {\n    context.startOptions = resolveStartOptions(initialOptions)\n    return handler(context.startOptions, initialOptions || {})\n  }\n}\n","import {\n  type Executor,\n  type RejectFunction,\n  type ResolveFunction,\n  type DeferredPromiseExecutor,\n  createDeferredExecutor,\n} from './createDeferredExecutor'\n\nexport class DeferredPromise<Input, Output = Input> extends Promise<Input> {\n  #executor: DeferredPromiseExecutor\n\n  public resolve: ResolveFunction<Output>\n  public reject: RejectFunction<Output>\n\n  constructor(executor: Executor<Input> | null = null) {\n    const deferredExecutor = createDeferredExecutor()\n    super((originalResolve, originalReject) => {\n      deferredExecutor(originalResolve, originalReject)\n      executor?.(deferredExecutor.resolve, deferredExecutor.reject)\n    })\n\n    this.#executor = deferredExecutor\n    this.resolve = this.#executor.resolve\n    this.reject = this.#executor.reject\n  }\n\n  public get state() {\n    return this.#executor.state\n  }\n\n  public get rejectionReason() {\n    return this.#executor.rejectionReason\n  }\n\n  public then<ThenResult = Input, CatchResult = never>(\n    onFulfilled?: (value: Input) => ThenResult | PromiseLike<ThenResult>,\n    onRejected?: (reason: any) => CatchResult | PromiseLike<CatchResult>\n  ) {\n    return this.#decorate(super.then(onFulfilled, onRejected))\n  }\n\n  public catch<CatchResult = never>(\n    onRejected?: (reason: any) => CatchResult | PromiseLike<CatchResult>\n  ) {\n    return this.#decorate(super.catch(onRejected))\n  }\n\n  public finally(onfinally?: () => void | Promise<any>) {\n    return this.#decorate(super.finally(onfinally))\n  }\n\n  #decorate<ChildInput>(\n    promise: Promise<ChildInput>\n  ): DeferredPromise<ChildInput, Output> {\n    return Object.defineProperties(promise, {\n      resolve: { configurable: true, value: this.resolve },\n      reject: { configurable: true, value: this.reject },\n    }) as DeferredPromise<ChildInput, Output>\n  }\n}\n","export type PromiseState = 'pending' | 'fulfilled' | 'rejected'\n\nexport type Executor<Value> = ConstructorParameters<typeof Promise<Value>>[0]\nexport type ResolveFunction<Value> = Parameters<Executor<Value>>[0]\nexport type RejectFunction<Reason> = Parameters<Executor<Reason>>[1]\n\nexport type DeferredPromiseExecutor<Input = never, Output = Input> = {\n  (resolve?: ResolveFunction<Input>, reject?: RejectFunction<any>): void\n\n  resolve: ResolveFunction<Input>\n  reject: RejectFunction<any>\n  result?: Output\n  state: PromiseState\n  rejectionReason?: unknown\n}\nexport function createDeferredExecutor<\n  Input = never,\n  Output = Input\n>(): DeferredPromiseExecutor<Input, Output> {\n  const executor = <DeferredPromiseExecutor<Input, Output>>((\n    resolve,\n    reject\n  ) => {\n    executor.state = 'pending'\n\n    executor.resolve = (data) => {\n      if (executor.state !== 'pending') {\n        return\n      }\n\n      executor.result = data as Output\n\n      const onFulfilled = <Value>(value: Value) => {\n        executor.state = 'fulfilled'\n        return value\n      }\n\n      return resolve(\n        data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled)\n      )\n    }\n\n    executor.reject = (reason) => {\n      if (executor.state !== 'pending') {\n        return\n      }\n\n      queueMicrotask(() => {\n        executor.state = 'rejected'\n      })\n\n      return reject((executor.rejectionReason = reason))\n    }\n  })\n\n  return executor\n}\n","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import assertClassBrand from \"./assertClassBrand.js\";\nexport default function _classPrivateFieldSet2(s, a, r) {\n  return s.set(assertClassBrand(s, a), r), r;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateFieldInitSpec(obj, privateMap, value) {\n  checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}","import { invariant } from 'outvariant'\nimport { DeferredPromise } from '@open-draft/deferred-promise'\n\nexport class RequestController {\n  public responsePromise: DeferredPromise<Response | undefined>\n\n  constructor(protected request: Request) {\n    this.responsePromise = new DeferredPromise()\n  }\n\n  public respondWith(response?: Response): void {\n    invariant(\n      this.responsePromise.state === 'pending',\n      'Failed to respond to \"%s %s\" request: the \"request\" event has already been responded to.',\n      this.request.method,\n      this.request.url\n    )\n\n    this.responsePromise.resolve(response)\n  }\n}\n","import { RequestController } from './RequestController'\n\nexport type InteractiveRequest = globalThis.Request & {\n  respondWith: RequestController['respondWith']\n}\n\nexport function toInteractiveRequest(request: Request): {\n  interactiveRequest: InteractiveRequest\n  requestController: RequestController\n} {\n  const requestController = new RequestController(request)\n\n  Reflect.set(\n    request,\n    'respondWith',\n    requestController.respondWith.bind(requestController)\n  )\n\n  return {\n    interactiveRequest: request as InteractiveRequest,\n    requestController,\n  }\n}\n","import { Emitter, EventMap } from 'strict-event-emitter'\n\n/**\n * Emits an event on the given emitter but executes\n * the listeners sequentially. This accounts for asynchronous\n * listeners (e.g. those having \"sleep\" and handling the request).\n */\nexport async function emitAsync<\n  Events extends EventMap,\n  EventName extends keyof Events\n>(\n  emitter: Emitter<Events>,\n  eventName: EventName,\n  ...data: Events[EventName]\n): Promise<void> {\n  const listners = emitter.listeners(eventName)\n\n  if (listners.length === 0) {\n    return\n  }\n\n  for (const listener of listners) {\n    await listener.apply(emitter, data)\n  }\n}\n","import { invariant } from 'outvariant'\nimport { DeferredPromise } from '@open-draft/deferred-promise'\nimport { until } from '@open-draft/until'\nimport { HttpRequestEventMap, IS_PATCHED_MODULE } from '../../glossary'\nimport { Interceptor } from '../../Interceptor'\nimport { toInteractiveRequest } from '../../utils/toInteractiveRequest'\nimport { emitAsync } from '../../utils/emitAsync'\nimport { isPropertyAccessible } from '../../utils/isPropertyAccessible'\nimport { canParseUrl } from '../../utils/canParseUrl'\nimport { createRequestId } from '../../createRequestId'\n\nexport class FetchInterceptor extends Interceptor<HttpRequestEventMap> {\n  static symbol = Symbol('fetch')\n\n  constructor() {\n    super(FetchInterceptor.symbol)\n  }\n\n  protected checkEnvironment() {\n    return (\n      typeof globalThis !== 'undefined' &&\n      typeof globalThis.fetch !== 'undefined'\n    )\n  }\n\n  protected async setup() {\n    const pureFetch = globalThis.fetch\n\n    invariant(\n      !(pureFetch as any)[IS_PATCHED_MODULE],\n      'Failed to patch the \"fetch\" module: already patched.'\n    )\n\n    globalThis.fetch = async (input, init) => {\n      const requestId = createRequestId()\n\n      /**\n       * @note Resolve potentially relative request URL\n       * against the present `location`. This is mainly\n       * for native `fetch` in JSDOM.\n       * @see https://github.com/mswjs/msw/issues/1625\n       */\n      const resolvedInput =\n        typeof input === 'string' &&\n        typeof location !== 'undefined' &&\n        !canParseUrl(input)\n          ? new URL(input, location.origin)\n          : input\n\n      const request = new Request(resolvedInput, init)\n\n      this.logger.info('[%s] %s', request.method, request.url)\n\n      const { interactiveRequest, requestController } =\n        toInteractiveRequest(request)\n\n      this.logger.info(\n        'emitting the \"request\" event for %d listener(s)...',\n        this.emitter.listenerCount('request')\n      )\n\n      this.emitter.once('request', ({ requestId: pendingRequestId }) => {\n        if (pendingRequestId !== requestId) {\n          return\n        }\n\n        if (requestController.responsePromise.state === 'pending') {\n          requestController.responsePromise.resolve(undefined)\n        }\n      })\n\n      this.logger.info('awaiting for the mocked response...')\n\n      const signal = interactiveRequest.signal\n      const requestAborted = new DeferredPromise()\n\n      // Signal isn't always defined in react-native.\n      if (signal) {\n        signal.addEventListener(\n          'abort',\n          () => {\n            requestAborted.reject(signal.reason)\n          },\n          { once: true }\n        )\n      }\n\n      const resolverResult = await until(async () => {\n        const listenersFinished = emitAsync(this.emitter, 'request', {\n          request: interactiveRequest,\n          requestId,\n        })\n\n        await Promise.race([\n          requestAborted,\n          // Put the listeners invocation Promise in the same race condition\n          // with the request abort Promise because otherwise awaiting the listeners\n          // would always yield some response (or undefined).\n          listenersFinished,\n          requestController.responsePromise,\n        ])\n\n        this.logger.info('all request listeners have been resolved!')\n\n        const mockedResponse = await requestController.responsePromise\n        this.logger.info('event.respondWith called with:', mockedResponse)\n\n        return mockedResponse\n      })\n\n      if (requestAborted.state === 'rejected') {\n        return Promise.reject(requestAborted.rejectionReason)\n      }\n\n      if (resolverResult.error) {\n        return Promise.reject(createNetworkError(resolverResult.error))\n      }\n\n      const mockedResponse = resolverResult.data\n\n      if (mockedResponse && !request.signal?.aborted) {\n        this.logger.info('received mocked response:', mockedResponse)\n\n        // Reject the request Promise on mocked \"Response.error\" responses.\n        if (\n          isPropertyAccessible(mockedResponse, 'type') &&\n          mockedResponse.type === 'error'\n        ) {\n          this.logger.info(\n            'received a network error response, rejecting the request promise...'\n          )\n\n          /**\n           * Set the cause of the request promise rejection to the\n           * network error Response instance. This different from Undici.\n           * Undici will forward the \"response.error\" custom property\n           * as the rejection reason but for \"Response.error()\" static method\n           * \"response.error\" will equal to undefined, making \"cause\" an empty Error.\n           * @see https://github.com/nodejs/undici/blob/83cb522ae0157a19d149d72c7d03d46e34510d0a/lib/fetch/response.js#L344\n           */\n          return Promise.reject(createNetworkError(mockedResponse))\n        }\n\n        // Clone the mocked response for the \"response\" event listener.\n        // This way, the listener can read the response and not lock its body\n        // for the actual fetch consumer.\n        const responseClone = mockedResponse.clone()\n\n        this.emitter.emit('response', {\n          response: responseClone,\n          isMockedResponse: true,\n          request: interactiveRequest,\n          requestId,\n        })\n\n        // Set the \"response.url\" property to equal the intercepted request URL.\n        Object.defineProperty(mockedResponse, 'url', {\n          writable: false,\n          enumerable: true,\n          configurable: false,\n          value: request.url,\n        })\n\n        return mockedResponse\n      }\n\n      this.logger.info('no mocked response received!')\n\n      return pureFetch(request).then((response) => {\n        const responseClone = response.clone()\n        this.logger.info('original fetch performed', responseClone)\n\n        this.emitter.emit('response', {\n          response: responseClone,\n          isMockedResponse: false,\n          request: interactiveRequest,\n          requestId,\n        })\n\n        return response\n      })\n    }\n\n    Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true,\n    })\n\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n        value: undefined,\n      })\n\n      globalThis.fetch = pureFetch\n\n      this.logger.info(\n        'restored native \"globalThis.fetch\"!',\n        globalThis.fetch.name\n      )\n    })\n  }\n}\n\nfunction createNetworkError(cause: unknown) {\n  return Object.assign(new TypeError('Failed to fetch'), {\n    cause,\n  })\n}\n","/**\n * Returns a boolean indicating whether the given URL string\n * can be parsed into a `URL` instance.\n * A substitute for `URL.canParse()` for Node.js 18.\n */\nexport function canParseUrl(url: string): boolean {\n  try {\n    new URL(url)\n    return true\n  } catch (_error) {\n    return false\n  }\n}\n","/**\n * A function that validates if property access is possible on an object\n * without throwing. It returns `true` if the property access is possible\n * and `false` otherwise.\n *\n * Environments like miniflare will throw on property access on certain objects\n * like Request and Response, for unimplemented properties.\n */\nexport function isPropertyAccessible<Obj extends Record<string, any>>(\n  obj: Obj,\n  key: keyof Obj\n) {\n  try {\n    obj[key]\n    return true\n  } catch {\n    return false\n  }\n}\n","export class EventPolyfill implements Event {\n  readonly AT_TARGET: number = 0\n  readonly BUBBLING_PHASE: number = 0\n  readonly CAPTURING_PHASE: number = 0\n  readonly NONE: number = 0\n\n  public type: string = ''\n  public srcElement: EventTarget | null = null\n  public target: EventTarget | null\n  public currentTarget: EventTarget | null = null\n  public eventPhase: number = 0\n  public timeStamp: number\n  public isTrusted: boolean = true\n  public composed: boolean = false\n  public cancelable: boolean = true\n  public defaultPrevented: boolean = false\n  public bubbles: boolean = true\n  public lengthComputable: boolean = true\n  public loaded: number = 0\n  public total: number = 0\n\n  cancelBubble: boolean = false\n  returnValue: boolean = true\n\n  constructor(\n    type: string,\n    options?: { target: EventTarget; currentTarget: EventTarget }\n  ) {\n    this.type = type\n    this.target = options?.target || null\n    this.currentTarget = options?.currentTarget || null\n    this.timeStamp = Date.now()\n  }\n\n  public composedPath(): EventTarget[] {\n    return []\n  }\n\n  public initEvent(type: string, bubbles?: boolean, cancelable?: boolean) {\n    this.type = type\n    this.bubbles = !!bubbles\n    this.cancelable = !!cancelable\n  }\n\n  public preventDefault() {\n    this.defaultPrevented = true\n  }\n\n  public stopPropagation() {}\n  public stopImmediatePropagation() {}\n}\n","import { EventPolyfill } from './EventPolyfill'\n\nexport class ProgressEventPolyfill extends EventPolyfill {\n  readonly lengthComputable: boolean\n  readonly composed: boolean\n  readonly loaded: number\n  readonly total: number\n\n  constructor(type: string, init?: ProgressEventInit) {\n    super(type)\n\n    this.lengthComputable = init?.lengthComputable || false\n    this.composed = init?.composed || false\n    this.loaded = init?.loaded || 0\n    this.total = init?.total || 0\n  }\n}\n","import { EventPolyfill } from '../polyfills/EventPolyfill'\nimport { ProgressEventPolyfill } from '../polyfills/ProgressEventPolyfill'\n\nconst SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== 'undefined'\n\nexport function createEvent(\n  target: XMLHttpRequest,\n  type: string,\n  init?: ProgressEventInit\n): EventPolyfill {\n  const progressEvents = [\n    'error',\n    'progress',\n    'loadstart',\n    'loadend',\n    'load',\n    'timeout',\n    'abort',\n  ]\n\n  /**\n   * `ProgressEvent` is not supported in React Native.\n   * @see https://github.com/mswjs/interceptors/issues/40\n   */\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT\n    ? ProgressEvent\n    : ProgressEventPolyfill\n\n  const event = progressEvents.includes(type)\n    ? new ProgressEventClass(type, {\n        lengthComputable: true,\n        loaded: init?.loaded || 0,\n        total: init?.total || 0,\n      })\n    : new EventPolyfill(type, {\n        target,\n        currentTarget: target,\n      })\n\n  return event\n}\n","/**\n * Returns the source object of the given property on the target object\n * (the target itself, any parent in its prototype, or null).\n */\nexport function findPropertySource(\n  target: object,\n  propertyName: string | symbol\n): object | null {\n  if (!(propertyName in target)) {\n    return null\n  }\n\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName)\n  if (hasProperty) {\n    return target\n  }\n\n  const prototype = Reflect.getPrototypeOf(target)\n  return prototype ? findPropertySource(prototype, propertyName) : null\n}\n","import { findPropertySource } from './findPropertySource'\n\nexport interface ProxyOptions<Target extends Record<string, any>> {\n  constructorCall?(args: Array<unknown>, next: NextFunction<Target>): Target\n\n  methodCall?<F extends keyof Target>(\n    this: Target,\n    data: [methodName: F, args: Array<unknown>],\n    next: NextFunction<void>\n  ): void\n\n  setProperty?(\n    data: [propertyName: string | symbol, nextValue: unknown],\n    next: NextFunction<boolean>\n  ): boolean\n\n  getProperty?(\n    data: [propertyName: string | symbol, receiver: Target],\n    next: NextFunction<void>\n  ): void\n}\n\nexport type NextFunction<ReturnType> = () => ReturnType\n\nexport function createProxy<Target extends object>(\n  target: Target,\n  options: ProxyOptions<Target>\n): Target {\n  const proxy = new Proxy(target, optionsToProxyHandler(options))\n\n  return proxy\n}\n\nfunction optionsToProxyHandler<T extends Record<string, any>>(\n  options: ProxyOptions<T>\n): ProxyHandler<T> {\n  const { constructorCall, methodCall, getProperty, setProperty } = options\n  const handler: ProxyHandler<T> = {}\n\n  if (typeof constructorCall !== 'undefined') {\n    handler.construct = function (target, args, newTarget) {\n      const next = Reflect.construct.bind(null, target as any, args, newTarget)\n      return constructorCall.call(newTarget, args, next)\n    }\n  }\n\n  handler.set = function (target, propertyName, nextValue) {\n    const next = () => {\n      const propertySource = findPropertySource(target, propertyName) || target\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(\n        propertySource,\n        propertyName\n      )\n\n      // Respect any custom setters present for this property.\n      if (typeof ownDescriptors?.set !== 'undefined') {\n        ownDescriptors.set.apply(target, [nextValue])\n        return true\n      }\n\n      // Otherwise, set the property on the source.\n      return Reflect.defineProperty(propertySource, propertyName, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: nextValue,\n      })\n    }\n\n    if (typeof setProperty !== 'undefined') {\n      return setProperty.call(target, [propertyName, nextValue], next)\n    }\n\n    return next()\n  }\n\n  handler.get = function (target, propertyName, receiver) {\n    /**\n     * @note Using `Reflect.get()` here causes \"TypeError: Illegal invocation\".\n     */\n    const next = () => target[propertyName as any]\n\n    const value =\n      typeof getProperty !== 'undefined'\n        ? getProperty.call(target, [propertyName, receiver], next)\n        : next()\n\n    if (typeof value === 'function') {\n      return (...args: Array<any>) => {\n        const next = value.bind(target, ...args)\n\n        if (typeof methodCall !== 'undefined') {\n          return methodCall.call(target, [propertyName as any, args], next)\n        }\n\n        return next()\n      }\n    }\n\n    return value\n  }\n\n  return handler\n}\n","import { isResponseWithoutBody } from '../../../utils/responseUtils'\n\n/**\n * Creates a Fetch API `Response` instance from the given\n * `XMLHttpRequest` instance and a response body.\n */\nexport function createResponse(\n  request: XMLHttpRequest,\n  body: BodyInit | null\n): Response {\n  /**\n   * Handle XMLHttpRequest responses that must have null as the\n   * response body when represented using Fetch API Response.\n   * XMLHttpRequest response will always have an empty string\n   * as the \"request.response\" in those cases, resulting in an error\n   * when constructing a Response instance.\n   * @see https://github.com/mswjs/interceptors/issues/379\n   */\n  const responseBodyOrNull = isResponseWithoutBody(request.status) ? null : body\n\n  return new Response(responseBodyOrNull, {\n    status: request.status,\n    statusText: request.statusText,\n    headers: createHeadersFromXMLHttpReqestHeaders(\n      request.getAllResponseHeaders()\n    ),\n  })\n}\n\nfunction createHeadersFromXMLHttpReqestHeaders(headersString: string): Headers {\n  const headers = new Headers()\n\n  const lines = headersString.split(/[\\r\\n]+/)\n  for (const line of lines) {\n    if (line.trim() === '') {\n      continue\n    }\n\n    const [name, ...parts] = line.split(': ')\n    const value = parts.join(': ')\n\n    headers.append(name, value)\n  }\n\n  return headers\n}\n","import { invariant } from 'outvariant'\nimport { isNodeProcess } from 'is-node-process'\nimport type { Logger } from '@open-draft/logger'\nimport { concatArrayBuffer } from './utils/concatArrayBuffer'\nimport { createEvent } from './utils/createEvent'\nimport {\n  decodeBuffer,\n  encodeBuffer,\n  toArrayBuffer,\n} from '../../utils/bufferUtils'\nimport { createProxy } from '../../utils/createProxy'\nimport { isDomParserSupportedType } from './utils/isDomParserSupportedType'\nimport { parseJson } from '../../utils/parseJson'\nimport { createResponse } from './utils/createResponse'\nimport { INTERNAL_REQUEST_ID_HEADER_NAME } from '../../Interceptor'\nimport { createRequestId } from '../../createRequestId'\n\nconst IS_MOCKED_RESPONSE = Symbol('isMockedResponse')\nconst IS_NODE = isNodeProcess()\n\n/**\n * An `XMLHttpRequest` instance controller that allows us\n * to handle any given request instance (e.g. responding to it).\n */\nexport class XMLHttpRequestController {\n  public request: XMLHttpRequest\n  public requestId: string\n  public onRequest?: (\n    this: XMLHttpRequestController,\n    args: {\n      request: Request\n      requestId: string\n    }\n  ) => Promise<void>\n  public onResponse?: (\n    this: XMLHttpRequestController,\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ) => void\n\n  private method: string = 'GET'\n  private url: URL = null as any\n  private requestHeaders: Headers\n  private requestBody?: XMLHttpRequestBodyInit | Document | null\n  private responseBuffer: Uint8Array\n  private events: Map<keyof XMLHttpRequestEventTargetEventMap, Array<Function>>\n\n  constructor(\n    readonly initialRequest: XMLHttpRequest,\n    public logger: Logger\n  ) {\n    this.events = new Map()\n    this.requestId = createRequestId()\n    this.requestHeaders = new Headers()\n    this.responseBuffer = new Uint8Array()\n\n    this.request = createProxy(initialRequest, {\n      setProperty: ([propertyName, nextValue], invoke) => {\n        switch (propertyName) {\n          case 'ontimeout': {\n            const eventName = propertyName.slice(\n              2\n            ) as keyof XMLHttpRequestEventTargetEventMap\n\n            /**\n             * @note Proxy callbacks to event listeners because JSDOM has trouble\n             * translating these properties to callbacks. It seemed to be operating\n             * on events exclusively.\n             */\n            this.request.addEventListener(eventName, nextValue as any)\n\n            return invoke()\n          }\n\n          default: {\n            return invoke()\n          }\n        }\n      },\n      methodCall: ([methodName, args], invoke) => {\n        switch (methodName) {\n          case 'open': {\n            const [method, url] = args as [string, string | undefined]\n\n            if (typeof url === 'undefined') {\n              this.method = 'GET'\n              this.url = toAbsoluteUrl(method)\n            } else {\n              this.method = method\n              this.url = toAbsoluteUrl(url)\n            }\n\n            this.logger = this.logger.extend(`${this.method} ${this.url.href}`)\n            this.logger.info('open', this.method, this.url.href)\n\n            return invoke()\n          }\n\n          case 'addEventListener': {\n            const [eventName, listener] = args as [\n              keyof XMLHttpRequestEventTargetEventMap,\n              Function,\n            ]\n\n            this.registerEvent(eventName, listener)\n            this.logger.info('addEventListener', eventName, listener)\n\n            return invoke()\n          }\n\n          case 'setRequestHeader': {\n            const [name, value] = args as [string, string]\n            this.requestHeaders.set(name, value)\n\n            this.logger.info('setRequestHeader', name, value)\n\n            return invoke()\n          }\n\n          case 'send': {\n            const [body] = args as [\n              body?: XMLHttpRequestBodyInit | Document | null,\n            ]\n\n            if (body != null) {\n              this.requestBody =\n                typeof body === 'string' ? encodeBuffer(body) : body\n            }\n\n            this.request.addEventListener('load', () => {\n              if (typeof this.onResponse !== 'undefined') {\n                // Create a Fetch API Response representation of whichever\n                // response this XMLHttpRequest received. Note those may\n                // be either a mocked and the original response.\n                const fetchResponse = createResponse(\n                  this.request,\n                  /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */\n                  this.request.response\n                )\n\n                // Notify the consumer about the response.\n                this.onResponse.call(this, {\n                  response: fetchResponse,\n                  isMockedResponse: IS_MOCKED_RESPONSE in this.request,\n                  request: fetchRequest,\n                  requestId: this.requestId!,\n                })\n              }\n            })\n\n            // Delegate request handling to the consumer.\n            const fetchRequest = this.toFetchApiRequest()\n            const onceRequestSettled =\n              this.onRequest?.call(this, {\n                request: fetchRequest,\n                requestId: this.requestId!,\n              }) || Promise.resolve()\n\n            onceRequestSettled.finally(() => {\n              // If the consumer didn't handle the request perform it as-is.\n              // Note that the request may not yet be DONE and may, in fact,\n              // be LOADING while the \"respondWith\" method does its magic.\n              if (this.request.readyState < this.request.LOADING) {\n                this.logger.info(\n                  'request callback settled but request has not been handled (readystate %d), performing as-is...',\n                  this.request.readyState\n                )\n\n                /**\n                 * @note Set the intercepted request ID on the original request in Node.js\n                 * so that if it triggers any other interceptors, they don't attempt\n                 * to process it once again.\n                 *\n                 * For instance, XMLHttpRequest is often implemented via \"http.ClientRequest\"\n                 * and we don't want for both XHR and ClientRequest interceptors to\n                 * handle the same request at the same time (e.g. emit the \"response\" event twice).\n                 */\n                if (IS_NODE) {\n                  this.request.setRequestHeader(\n                    INTERNAL_REQUEST_ID_HEADER_NAME,\n                    this.requestId!\n                  )\n                }\n\n                return invoke()\n              }\n            })\n\n            break\n          }\n\n          default: {\n            return invoke()\n          }\n        }\n      },\n    })\n  }\n\n  private registerEvent(\n    eventName: keyof XMLHttpRequestEventTargetEventMap,\n    listener: Function\n  ): void {\n    const prevEvents = this.events.get(eventName) || []\n    const nextEvents = prevEvents.concat(listener)\n    this.events.set(eventName, nextEvents)\n\n    this.logger.info('registered event \"%s\"', eventName, listener)\n  }\n\n  /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */\n  public respondWith(response: Response): void {\n    this.logger.info(\n      'responding with a mocked response: %d %s',\n      response.status,\n      response.statusText\n    )\n\n    /**\n     * @note Since `XMLHttpRequestController` delegates the handling of the responses\n     * to the \"load\" event listener that doesn't distinguish between the mocked and original\n     * responses, mark the request that had a mocked response with a corresponding symbol.\n     */\n    define(this.request, IS_MOCKED_RESPONSE, true)\n\n    define(this.request, 'status', response.status)\n    define(this.request, 'statusText', response.statusText)\n    define(this.request, 'responseURL', this.url.href)\n\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n      apply: (_, __, args: [name: string]) => {\n        this.logger.info('getResponseHeader', args[0])\n\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info('headers not received yet, returning null')\n\n          // Headers not received yet, nothing to return.\n          return null\n        }\n\n        const headerValue = response.headers.get(args[0])\n        this.logger.info(\n          'resolved response header \"%s\" to',\n          args[0],\n          headerValue\n        )\n\n        return headerValue\n      },\n    })\n\n    this.request.getAllResponseHeaders = new Proxy(\n      this.request.getAllResponseHeaders,\n      {\n        apply: () => {\n          this.logger.info('getAllResponseHeaders')\n\n          if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n            this.logger.info('headers not received yet, returning empty string')\n\n            // Headers not received yet, nothing to return.\n            return ''\n          }\n\n          const headersList = Array.from(response.headers.entries())\n          const allHeaders = headersList\n            .map(([headerName, headerValue]) => {\n              return `${headerName}: ${headerValue}`\n            })\n            .join('\\r\\n')\n\n          this.logger.info('resolved all response headers to', allHeaders)\n\n          return allHeaders\n        },\n      }\n    )\n\n    // Update the response getters to resolve against the mocked response.\n    Object.defineProperties(this.request, {\n      response: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.response,\n      },\n      responseText: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseText,\n      },\n      responseXML: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseXML,\n      },\n    })\n\n    const totalResponseBodyLength = response.headers.has('Content-Length')\n      ? Number(response.headers.get('Content-Length'))\n      : /**\n         * @todo Infer the response body length from the response body.\n         */\n        undefined\n\n    this.logger.info('calculated response body length', totalResponseBodyLength)\n\n    this.trigger('loadstart', {\n      loaded: 0,\n      total: totalResponseBodyLength,\n    })\n\n    this.setReadyState(this.request.HEADERS_RECEIVED)\n    this.setReadyState(this.request.LOADING)\n\n    const finalizeResponse = () => {\n      this.logger.info('finalizing the mocked response...')\n\n      this.setReadyState(this.request.DONE)\n\n      this.trigger('load', {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength,\n      })\n\n      this.trigger('loadend', {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength,\n      })\n    }\n\n    if (response.body) {\n      this.logger.info('mocked response has body, streaming...')\n\n      const reader = response.body.getReader()\n\n      const readNextResponseBodyChunk = async () => {\n        const { value, done } = await reader.read()\n\n        if (done) {\n          this.logger.info('response body stream done!')\n          finalizeResponse()\n          return\n        }\n\n        if (value) {\n          this.logger.info('read response body chunk:', value)\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value)\n\n          this.trigger('progress', {\n            loaded: this.responseBuffer.byteLength,\n            total: totalResponseBodyLength,\n          })\n        }\n\n        readNextResponseBodyChunk()\n      }\n\n      readNextResponseBodyChunk()\n    } else {\n      finalizeResponse()\n    }\n  }\n\n  private responseBufferToText(): string {\n    return decodeBuffer(this.responseBuffer)\n  }\n\n  get response(): unknown {\n    this.logger.info(\n      'getResponse (responseType: %s)',\n      this.request.responseType\n    )\n\n    if (this.request.readyState !== this.request.DONE) {\n      return null\n    }\n\n    switch (this.request.responseType) {\n      case 'json': {\n        const responseJson = parseJson(this.responseBufferToText())\n        this.logger.info('resolved response JSON', responseJson)\n\n        return responseJson\n      }\n\n      case 'arraybuffer': {\n        const arrayBuffer = toArrayBuffer(this.responseBuffer)\n        this.logger.info('resolved response ArrayBuffer', arrayBuffer)\n\n        return arrayBuffer\n      }\n\n      case 'blob': {\n        const mimeType =\n          this.request.getResponseHeader('Content-Type') || 'text/plain'\n        const responseBlob = new Blob([this.responseBufferToText()], {\n          type: mimeType,\n        })\n\n        this.logger.info(\n          'resolved response Blob (mime type: %s)',\n          responseBlob,\n          mimeType\n        )\n\n        return responseBlob\n      }\n\n      default: {\n        const responseText = this.responseBufferToText()\n        this.logger.info(\n          'resolving \"%s\" response type as text',\n          this.request.responseType,\n          responseText\n        )\n\n        return responseText\n      }\n    }\n  }\n\n  get responseText(): string {\n    /**\n     * Throw when trying to read the response body as text when the\n     * \"responseType\" doesn't expect text. This just respects the spec better.\n     * @see https://xhr.spec.whatwg.org/#the-responsetext-attribute\n     */\n    invariant(\n      this.request.responseType === '' || this.request.responseType === 'text',\n      'InvalidStateError: The object is in invalid state.'\n    )\n\n    if (\n      this.request.readyState !== this.request.LOADING &&\n      this.request.readyState !== this.request.DONE\n    ) {\n      return ''\n    }\n\n    const responseText = this.responseBufferToText()\n    this.logger.info('getResponseText: \"%s\"', responseText)\n\n    return responseText\n  }\n\n  get responseXML(): Document | null {\n    invariant(\n      this.request.responseType === '' ||\n        this.request.responseType === 'document',\n      'InvalidStateError: The object is in invalid state.'\n    )\n\n    if (this.request.readyState !== this.request.DONE) {\n      return null\n    }\n\n    const contentType = this.request.getResponseHeader('Content-Type') || ''\n\n    if (typeof DOMParser === 'undefined') {\n      console.warn(\n        'Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.'\n      )\n      return null\n    }\n\n    if (isDomParserSupportedType(contentType)) {\n      return new DOMParser().parseFromString(\n        this.responseBufferToText(),\n        contentType\n      )\n    }\n\n    return null\n  }\n\n  public errorWith(error: Error): void {\n    this.logger.info('responding with an error')\n\n    this.setReadyState(this.request.DONE)\n    this.trigger('error')\n    this.trigger('loadend')\n  }\n\n  /**\n   * Transitions this request's `readyState` to the given one.\n   */\n  private setReadyState(nextReadyState: number): void {\n    this.logger.info(\n      'setReadyState: %d -> %d',\n      this.request.readyState,\n      nextReadyState\n    )\n\n    if (this.request.readyState === nextReadyState) {\n      this.logger.info('ready state identical, skipping transition...')\n      return\n    }\n\n    define(this.request, 'readyState', nextReadyState)\n\n    this.logger.info('set readyState to: %d', nextReadyState)\n\n    if (nextReadyState !== this.request.UNSENT) {\n      this.logger.info('triggerring \"readystatechange\" event...')\n\n      this.trigger('readystatechange')\n    }\n  }\n\n  /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */\n  private trigger<\n    EventName extends keyof (XMLHttpRequestEventTargetEventMap & {\n      readystatechange: ProgressEvent<XMLHttpRequestEventTarget>\n    }),\n  >(eventName: EventName, options?: ProgressEventInit): void {\n    const callback = this.request[`on${eventName}`]\n    const event = createEvent(this.request, eventName, options)\n\n    this.logger.info('trigger \"%s\"', eventName, options || '')\n\n    // Invoke direct callbacks.\n    if (typeof callback === 'function') {\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName)\n      callback.call(this.request, event)\n    }\n\n    // Invoke event listeners.\n    for (const [registeredEventName, listeners] of this.events) {\n      if (registeredEventName === eventName) {\n        this.logger.info(\n          'found %d listener(s) for \"%s\" event, calling...',\n          listeners.length,\n          eventName\n        )\n\n        listeners.forEach((listener) => listener.call(this.request, event))\n      }\n    }\n  }\n\n  /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */\n  public toFetchApiRequest(): Request {\n    this.logger.info('converting request to a Fetch API Request...')\n\n    const fetchRequest = new Request(this.url.href, {\n      method: this.method,\n      headers: this.requestHeaders,\n      /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */\n      credentials: this.request.withCredentials ? 'include' : 'same-origin',\n      body: ['GET', 'HEAD'].includes(this.method)\n        ? null\n        : (this.requestBody as BodyInit),\n    })\n\n    const proxyHeaders = createProxy(fetchRequest.headers, {\n      methodCall: ([methodName, args], invoke) => {\n        // Forward the latest state of the internal request headers\n        // because the interceptor might have modified them\n        // without responding to the request.\n        switch (methodName) {\n          case 'append':\n          case 'set': {\n            const [headerName, headerValue] = args as [string, string]\n            this.request.setRequestHeader(headerName, headerValue)\n            break\n          }\n\n          case 'delete': {\n            const [headerName] = args as [string]\n            console.warn(\n              `XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`\n            )\n            break\n          }\n        }\n\n        return invoke()\n      },\n    })\n    define(fetchRequest, 'headers', proxyHeaders)\n\n    this.logger.info('converted request to a Fetch API Request!', fetchRequest)\n\n    return fetchRequest\n  }\n}\n\nfunction toAbsoluteUrl(url: string | URL): URL {\n  /**\n   * @note XMLHttpRequest interceptor may run in environments\n   * that implement XMLHttpRequest but don't implement \"location\"\n   * (for example, React Native). If that's the case, return the\n   * input URL as-is (nothing to be relative to).\n   * @see https://github.com/mswjs/msw/issues/1777\n   */\n  if (typeof location === 'undefined') {\n    return new URL(url)\n  }\n\n  return new URL(url.toString(), location.href)\n}\n\nfunction define(\n  target: object,\n  property: string | symbol,\n  value: unknown\n): void {\n  Reflect.defineProperty(target, property, {\n    // Ensure writable properties to allow redefining readonly properties.\n    writable: true,\n    enumerable: true,\n    value,\n  })\n}\n","/**\n * Concatenate two `Uint8Array` buffers.\n */\nexport function concatArrayBuffer(\n  left: Uint8Array,\n  right: Uint8Array\n): Uint8Array {\n  const result = new Uint8Array(left.byteLength + right.byteLength)\n  result.set(left, 0)\n  result.set(right, left.byteLength)\n  return result\n}\n","/**\n * Parses a given string into JSON.\n * Gracefully handles invalid JSON by returning `null`.\n */\nexport function parseJson(data: string): Record<string, unknown> | null {\n  try {\n    const json = JSON.parse(data)\n    return json\n  } catch (_) {\n    return null\n  }\n}\n","export function isDomParserSupportedType(\n  type: string\n): type is DOMParserSupportedType {\n  const supportedTypes: Array<DOMParserSupportedType> = [\n    'application/xhtml+xml',\n    'application/xml',\n    'image/svg+xml',\n    'text/html',\n    'text/xml',\n  ]\n  return supportedTypes.some((supportedType) => {\n    return type.startsWith(supportedType)\n  })\n}\n","import { invariant } from 'outvariant'\nimport { Emitter } from 'strict-event-emitter'\nimport { HttpRequestEventMap, IS_PATCHED_MODULE } from '../../glossary'\nimport { InteractiveRequest } from '../../utils/toInteractiveRequest'\nimport { Interceptor } from '../../Interceptor'\nimport { createXMLHttpRequestProxy } from './XMLHttpRequestProxy'\n\nexport type XMLHttpRequestEventListener = (args: {\n  request: InteractiveRequest\n  requestId: string\n}) => Promise<void> | void\n\nexport type XMLHttpRequestEmitter = Emitter<HttpRequestEventMap>\n\nexport class XMLHttpRequestInterceptor extends Interceptor<HttpRequestEventMap> {\n  static interceptorSymbol = Symbol('xhr')\n\n  constructor() {\n    super(XMLHttpRequestInterceptor.interceptorSymbol)\n  }\n\n  protected checkEnvironment() {\n    return typeof globalThis.XMLHttpRequest !== 'undefined'\n  }\n\n  protected setup() {\n    const logger = this.logger.extend('setup')\n\n    logger.info('patching \"XMLHttpRequest\" module...')\n\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest\n\n    invariant(\n      !(PureXMLHttpRequest as any)[IS_PATCHED_MODULE],\n      'Failed to patch the \"XMLHttpRequest\" module: already patched.'\n    )\n\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n      emitter: this.emitter,\n      logger: this.logger,\n    })\n\n    logger.info(\n      'native \"XMLHttpRequest\" module patched!',\n      globalThis.XMLHttpRequest.name\n    )\n\n    Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true,\n    })\n\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n        value: undefined,\n      })\n\n      globalThis.XMLHttpRequest = PureXMLHttpRequest\n      logger.info(\n        'native \"XMLHttpRequest\" module restored!',\n        globalThis.XMLHttpRequest.name\n      )\n    })\n  }\n}\n","import { until } from '@open-draft/until'\nimport type { Logger } from '@open-draft/logger'\nimport { XMLHttpRequestEmitter } from '.'\nimport { toInteractiveRequest } from '../../utils/toInteractiveRequest'\nimport { emitAsync } from '../../utils/emitAsync'\nimport { XMLHttpRequestController } from './XMLHttpRequestController'\n\nexport interface XMLHttpRequestProxyOptions {\n  emitter: XMLHttpRequestEmitter\n  logger: Logger\n}\n\n/**\n * Create a proxied `XMLHttpRequest` class.\n * The proxied class establishes spies on certain methods,\n * allowing us to intercept requests and respond to them.\n */\nexport function createXMLHttpRequestProxy({\n  emitter,\n  logger,\n}: XMLHttpRequestProxyOptions) {\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n    construct(target, args, newTarget) {\n      logger.info('constructed new XMLHttpRequest')\n\n      const originalRequest = Reflect.construct(\n        target,\n        args,\n        newTarget\n      ) as XMLHttpRequest\n\n      /**\n       * @note Forward prototype descriptors onto the proxied object.\n       * XMLHttpRequest is implemented in JSDOM in a way that assigns\n       * a bunch of descriptors, like \"set responseType()\" on the prototype.\n       * With this propagation, we make sure that those descriptors trigger\n       * when the user operates with the proxied request instance.\n       */\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(\n        target.prototype\n      )\n      for (const propertyName in prototypeDescriptors) {\n        Reflect.defineProperty(\n          originalRequest,\n          propertyName,\n          prototypeDescriptors[propertyName]\n        )\n      }\n\n      const xhrRequestController = new XMLHttpRequestController(\n        originalRequest,\n        logger\n      )\n\n      xhrRequestController.onRequest = async function ({ request, requestId }) {\n        const { interactiveRequest, requestController } =\n          toInteractiveRequest(request)\n\n        this.logger.info('awaiting mocked response...')\n\n        emitter.once('request', ({ requestId: pendingRequestId }) => {\n          if (pendingRequestId !== requestId) {\n            return\n          }\n\n          if (requestController.responsePromise.state === 'pending') {\n            requestController.respondWith(undefined)\n          }\n        })\n\n        const resolverResult = await until(async () => {\n          this.logger.info(\n            'emitting the \"request\" event for %s listener(s)...',\n            emitter.listenerCount('request')\n          )\n\n          await emitAsync(emitter, 'request', {\n            request: interactiveRequest,\n            requestId,\n          })\n\n          this.logger.info('all \"request\" listeners settled!')\n\n          const mockedResponse = await requestController.responsePromise\n\n          this.logger.info('event.respondWith called with:', mockedResponse)\n\n          return mockedResponse\n        })\n\n        if (resolverResult.error) {\n          this.logger.info(\n            'request listener threw an exception, aborting request...',\n            resolverResult.error\n          )\n\n          /**\n           * @todo Consider forwarding this error to the stderr as well\n           * since not all consumers are expecting to handle errors.\n           * If they don't, this error will be swallowed.\n           */\n          xhrRequestController.errorWith(resolverResult.error)\n          return\n        }\n\n        const mockedResponse = resolverResult.data\n\n        if (typeof mockedResponse !== 'undefined') {\n          this.logger.info(\n            'received mocked response: %d %s',\n            mockedResponse.status,\n            mockedResponse.statusText\n          )\n\n          if (mockedResponse.type === 'error') {\n            this.logger.info(\n              'received a network error response, rejecting the request promise...'\n            )\n\n            xhrRequestController.errorWith(new TypeError('Network error'))\n            return\n          }\n\n          return xhrRequestController.respondWith(mockedResponse)\n        }\n\n        this.logger.info(\n          'no mocked response received, performing request as-is...'\n        )\n      }\n\n      xhrRequestController.onResponse = async function ({\n        response,\n        isMockedResponse,\n        request,\n        requestId,\n      }) {\n        this.logger.info(\n          'emitting the \"response\" event for %s listener(s)...',\n          emitter.listenerCount('response')\n        )\n\n        emitter.emit('response', {\n          response,\n          isMockedResponse,\n          request,\n          requestId,\n        })\n      }\n\n      // Return the proxied request from the controller\n      // so that the controller can react to the consumer's interactions\n      // with this request (opening/sending/etc).\n      return xhrRequestController.request\n    },\n  })\n\n  return XMLHttpRequestProxy\n}\n","import { createFallbackRequestListener } from './createFallbackRequestListener'\nimport { SetupWorkerInternalContext, StartHandler } from '../glossary'\nimport { printStartMessage } from './utils/printStartMessage'\n\nexport function createFallbackStart(\n  context: SetupWorkerInternalContext,\n): StartHandler {\n  return async function start(options) {\n    context.fallbackInterceptor = createFallbackRequestListener(\n      context,\n      options,\n    )\n\n    printStartMessage({\n      message: 'Mocking enabled (fallback mode).',\n      quiet: options.quiet,\n    })\n\n    return undefined\n  }\n}\n","import {\n  Interceptor,\n  BatchInterceptor,\n  HttpRequestEventMap,\n} from '@mswjs/interceptors'\nimport { FetchInterceptor } from '@mswjs/interceptors/fetch'\nimport { XMLHttpRequestInterceptor } from '@mswjs/interceptors/XMLHttpRequest'\nimport { SetupWorkerInternalContext, StartOptions } from '../glossary'\nimport type { RequiredDeep } from '~/core/typeUtils'\nimport { handleRequest } from '~/core/utils/handleRequest'\n\nexport function createFallbackRequestListener(\n  context: SetupWorkerInternalContext,\n  options: RequiredDeep<StartOptions>,\n): Interceptor<HttpRequestEventMap> {\n  const interceptor = new BatchInterceptor({\n    name: 'fallback',\n    interceptors: [new FetchInterceptor(), new XMLHttpRequestInterceptor()],\n  })\n\n  interceptor.on('request', async ({ request, requestId }) => {\n    const requestCloneForLogs = request.clone()\n\n    const response = await handleRequest(\n      request,\n      requestId,\n      context.getRequestHandlers(),\n      options,\n      context.emitter,\n      {\n        onMockedResponse(_, { handler, parsedResult }) {\n          if (!options.quiet) {\n            context.emitter.once('response:mocked', ({ response }) => {\n              handler.log({\n                request: requestCloneForLogs,\n                response,\n                parsedResult,\n              })\n            })\n          }\n        },\n      },\n    )\n\n    if (response) {\n      request.respondWith(response)\n    }\n  })\n\n  interceptor.on(\n    'response',\n    ({ response, isMockedResponse, request, requestId }) => {\n      context.emitter.emit(\n        isMockedResponse ? 'response:mocked' : 'response:bypass',\n        {\n          response,\n          request,\n          requestId,\n        },\n      )\n    },\n  )\n\n  interceptor.apply()\n\n  return interceptor\n}\n","/**\n * Returns a boolean indicating whether the current browser\n * supports `ReadableStream` as a `Transferable` when posting\n * messages.\n */\nexport function supportsReadableStreamTransfer() {\n  try {\n    const stream = new ReadableStream({\n      start: (controller) => controller.close(),\n    })\n    const message = new MessageChannel()\n    message.port1.postMessage(stream, [stream])\n    return true\n  } catch (error) {\n    return false\n  }\n}\n","import { invariant } from 'outvariant'\nimport { isNodeProcess } from 'is-node-process'\nimport {\n  SetupWorkerInternalContext,\n  ServiceWorkerIncomingEventsMap,\n  StartReturnType,\n  StopHandler,\n  StartHandler,\n  StartOptions,\n} from './glossary'\nimport { createStartHandler } from './start/createStartHandler'\nimport { createStop } from './stop/createStop'\nimport { ServiceWorkerMessage } from './start/utils/createMessageChannel'\nimport { RequestHandler } from '~/core/handlers/RequestHandler'\nimport { DEFAULT_START_OPTIONS } from './start/utils/prepareStartHandler'\nimport { createFallbackStart } from './start/createFallbackStart'\nimport { createFallbackStop } from './stop/createFallbackStop'\nimport { devUtils } from '~/core/utils/internal/devUtils'\nimport { SetupApi } from '~/core/SetupApi'\nimport { mergeRight } from '~/core/utils/internal/mergeRight'\nimport { LifeCycleEventsMap } from '~/core/sharedOptions'\nimport { SetupWorker } from './glossary'\nimport { supportsReadableStreamTransfer } from '../utils/supportsReadableStreamTransfer'\n\ninterface Listener {\n  target: EventTarget\n  eventType: string\n  callback: EventListenerOrEventListenerObject\n}\n\nexport class SetupWorkerApi\n  extends SetupApi<LifeCycleEventsMap>\n  implements SetupWorker\n{\n  private context: SetupWorkerInternalContext\n  private startHandler: StartHandler = null as any\n  private stopHandler: StopHandler = null as any\n  private listeners: Array<Listener>\n\n  constructor(...handlers: Array<RequestHandler>) {\n    super(...handlers)\n\n    invariant(\n      !isNodeProcess(),\n      devUtils.formatMessage(\n        'Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.',\n      ),\n    )\n\n    this.listeners = []\n    this.context = this.createWorkerContext()\n  }\n\n  private createWorkerContext(): SetupWorkerInternalContext {\n    const context: SetupWorkerInternalContext = {\n      // Mocking is not considered enabled until the worker\n      // signals back the successful activation event.\n      isMockingEnabled: false,\n      startOptions: null as any,\n      worker: null,\n      getRequestHandlers: () => {\n        return this.handlersController.currentHandlers()\n      },\n      registration: null,\n      requests: new Map(),\n      emitter: this.emitter,\n      workerChannel: {\n        on: (eventType, callback) => {\n          this.context.events.addListener<\n            MessageEvent<ServiceWorkerMessage<typeof eventType, any>>\n          >(navigator.serviceWorker, 'message', (event) => {\n            // Avoid messages broadcasted from unrelated workers.\n            if (event.source !== this.context.worker) {\n              return\n            }\n\n            const message = event.data\n\n            if (!message) {\n              return\n            }\n\n            if (message.type === eventType) {\n              callback(event, message)\n            }\n          })\n        },\n        send: (type) => {\n          this.context.worker?.postMessage(type)\n        },\n      },\n      events: {\n        addListener: (target, eventType, callback) => {\n          target.addEventListener(eventType, callback as EventListener)\n          this.listeners.push({\n            eventType,\n            target,\n            callback: callback as EventListener,\n          })\n\n          return () => {\n            target.removeEventListener(eventType, callback as EventListener)\n          }\n        },\n        removeAllListeners: () => {\n          for (const { target, eventType, callback } of this.listeners) {\n            target.removeEventListener(eventType, callback)\n          }\n          this.listeners = []\n        },\n        once: (eventType) => {\n          const bindings: Array<() => void> = []\n\n          return new Promise<\n            ServiceWorkerMessage<\n              typeof eventType,\n              ServiceWorkerIncomingEventsMap[typeof eventType]\n            >\n          >((resolve, reject) => {\n            const handleIncomingMessage = (event: MessageEvent) => {\n              try {\n                const message = event.data\n\n                if (message.type === eventType) {\n                  resolve(message)\n                }\n              } catch (error) {\n                reject(error)\n              }\n            }\n\n            bindings.push(\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                'message',\n                handleIncomingMessage,\n              ),\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                'messageerror',\n                reject,\n              ),\n            )\n          }).finally(() => {\n            bindings.forEach((unbind) => unbind())\n          })\n        },\n      },\n      supports: {\n        serviceWorkerApi:\n          !('serviceWorker' in navigator) || location.protocol === 'file:',\n        readableStreamTransfer: supportsReadableStreamTransfer(),\n      },\n    }\n\n    this.startHandler = context.supports.serviceWorkerApi\n      ? createFallbackStart(context)\n      : createStartHandler(context)\n\n    this.stopHandler = context.supports.serviceWorkerApi\n      ? createFallbackStop(context)\n      : createStop(context)\n\n    return context\n  }\n\n  public async start(options: StartOptions = {}): StartReturnType {\n    if (options.waitUntilReady === true) {\n      devUtils.warn(\n        'The \"waitUntilReady\" option has been deprecated. Please remove it from this \"worker.start()\" call. Follow the recommended Browser integration (https://mswjs.io/docs/integrations/browser) to eliminate any race conditions between the Service Worker registration and any requests made by your application on initial render.',\n      )\n    }\n\n    this.context.startOptions = mergeRight(\n      DEFAULT_START_OPTIONS,\n      options,\n    ) as SetupWorkerInternalContext['startOptions']\n\n    return await this.startHandler(this.context.startOptions, options)\n  }\n\n  public stop(): void {\n    super.dispose()\n    this.context.events.removeAllListeners()\n    this.context.emitter.removeAllListeners()\n    this.stopHandler()\n  }\n}\n\n/**\n * Sets up a requests interception in the browser with the given request handlers.\n * @param {RequestHandler[]} handlers List of request handlers.\n *\n * @see {@link https://mswjs.io/docs/api/setup-worker `setupWorker()` API reference}\n */\nexport function setupWorker(...handlers: Array<RequestHandler>): SetupWorker {\n  return new SetupWorkerApi(...handlers)\n}\n","import { SetupWorkerInternalContext, StopHandler } from '../glossary'\nimport { printStopMessage } from './utils/printStopMessage'\n\nexport function createFallbackStop(\n  context: SetupWorkerInternalContext,\n): StopHandler {\n  return function stop() {\n    context.fallbackInterceptor?.dispose()\n    printStopMessage({ quiet: context.startOptions?.quiet })\n  }\n}\n","import { splitCookiesString } from 'set-cookie-parser'\nimport { HeadersList, HeadersObject } from './glossary'\nimport { normalizeHeaderName } from './utils/normalizeHeaderName'\nimport { normalizeHeaderValue } from './utils/normalizeHeaderValue'\nimport { isValidHeaderName } from './utils/isValidHeaderName'\nimport { isValidHeaderValue } from './utils/isValidHeaderValue'\n\nexport const NORMALIZED_HEADERS: unique symbol = Symbol('normalizedHeaders')\n\nexport const RAW_HEADER_NAMES: unique symbol = Symbol('rawHeaderNames')\n\nconst HEADER_VALUE_DELIMITER = ', ' as const\n\nexport class Headers {\n  // Normalized header {\"name\":\"a, b\"} storage.\n  private [NORMALIZED_HEADERS]: Record<string, string> = {}\n\n  // Keeps the mapping between the raw header name\n  // and the normalized header name to ease the lookup.\n  private [RAW_HEADER_NAMES]: Map<string, string> = new Map()\n\n  constructor(init?: HeadersInit | HeadersObject | HeadersList) {\n    /**\n     * @note Cannot necessarily check if the `init` is an instance of the\n     * `Headers` because that class may not be defined in Node or jsdom.\n     */\n    if (\n      ['Headers', 'HeadersPolyfill'].includes(init?.constructor.name) ||\n      init instanceof Headers ||\n      (typeof globalThis.Headers !== 'undefined' &&\n        init instanceof globalThis.Headers)\n    ) {\n      const initialHeaders = init as Headers\n      initialHeaders.forEach((value, name) => {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(init)) {\n      init.forEach(([name, value]) => {\n        this.append(\n          name,\n          Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value\n        )\n      })\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach((name) => {\n        const value = init[name]\n        this.append(\n          name,\n          Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value\n        )\n      })\n    }\n  }\n\n  [Symbol.toStringTag] = 'Headers';\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  *keys(): IterableIterator<string> {\n    for (const [name] of this.entries()) {\n      yield name\n    }\n  }\n\n  *values(): IterableIterator<string> {\n    for (const [, value] of this.entries()) {\n      yield value\n    }\n  }\n\n  *entries(): IterableIterator<[string, string]> {\n    // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n    let sortedKeys = Object.keys(this[NORMALIZED_HEADERS]).sort((a, b) =>\n      a.localeCompare(b)\n    )\n    for (const name of sortedKeys) {\n      if (name === 'set-cookie') {\n        for (const value of this.getSetCookie()) {\n          yield [name, value]\n        }\n      } else {\n        yield [name, this.get(name)]\n      }\n    }\n  }\n\n  /**\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\n   */\n  has(name: string): boolean {\n    if (!isValidHeaderName(name)) {\n      throw new TypeError(`Invalid header name \"${name}\"`)\n    }\n\n    return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name))\n  }\n\n  /**\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\n   */\n  get(name: string): string | null {\n    if (!isValidHeaderName(name)) {\n      throw TypeError(`Invalid header name \"${name}\"`)\n    }\n\n    return this[NORMALIZED_HEADERS][normalizeHeaderName(name)] ?? null\n  }\n\n  /**\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  set(name: string, value: string): void {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return\n    }\n\n    const normalizedName = normalizeHeaderName(name)\n    const normalizedValue = normalizeHeaderValue(value)\n\n    this[NORMALIZED_HEADERS][normalizedName] =\n      normalizeHeaderValue(normalizedValue)\n    this[RAW_HEADER_NAMES].set(normalizedName, name)\n  }\n\n  /**\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  append(name: string, value: string): void {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return\n    }\n\n    const normalizedName = normalizeHeaderName(name)\n    const normalizedValue = normalizeHeaderValue(value)\n\n    let resolvedValue = this.has(normalizedName)\n      ? `${this.get(normalizedName)}, ${normalizedValue}`\n      : normalizedValue\n\n    this.set(name, resolvedValue)\n  }\n\n  /**\n   * Deletes a header from the `Headers` object.\n   */\n  delete(name: string): void {\n    if (!isValidHeaderName(name)) {\n      return\n    }\n\n    if (!this.has(name)) {\n      return\n    }\n\n    const normalizedName = normalizeHeaderName(name)\n    delete this[NORMALIZED_HEADERS][normalizedName]\n    this[RAW_HEADER_NAMES].delete(normalizedName)\n  }\n\n  /**\n   * Traverses the `Headers` object,\n   * calling the given callback for each header.\n   */\n  forEach<ThisArg = this>(\n    callback: (\n      this: ThisArg,\n      value: string,\n      name: string,\n      parent: this\n    ) => void,\n    thisArg?: ThisArg\n  ) {\n    for (const [name, value] of this.entries()) {\n      callback.call(thisArg, value, name, this)\n    }\n  }\n\n  /**\n   * Returns an array containing the values\n   * of all Set-Cookie headers associated\n   * with a response\n   */\n  getSetCookie(): string[] {\n    const setCookieHeader = this.get('set-cookie')\n\n    if (setCookieHeader === null) {\n      return []\n    }\n\n    if (setCookieHeader === '') {\n      return ['']\n    }\n\n    return splitCookiesString(setCookieHeader)\n  }\n}\n","\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name,\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return { name: name, value: value };\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch =\n        input.headers[\n          Object.keys(input.headers).find(function (key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })\n        ];\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n        );\n      }\n      input = sch;\n    }\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n","const HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&'*+.^_`|~]/i\n\nexport function normalizeHeaderName(name: string): string {\n  if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === '') {\n    throw new TypeError('Invalid character in header field name')\n  }\n\n  return name.trim().toLowerCase()\n}\n","const charCodesToRemove = [\n  String.fromCharCode(0x0a),\n  String.fromCharCode(0x0d),\n  String.fromCharCode(0x09),\n  String.fromCharCode(0x20),\n]\n\nconst HEADER_VALUE_REMOVE_REGEXP = new RegExp(\n  `(^[${charCodesToRemove.join('')}]|$[${charCodesToRemove.join('')}])`,\n  'g'\n)\n\n/**\n * Normalize the given header value.\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n */\nexport function normalizeHeaderValue(value: string): string {\n  const nextValue = value.replace(HEADER_VALUE_REMOVE_REGEXP, '')\n  return nextValue\n}\n","/**\n * Validate the given header name.\n * @see https://fetch.spec.whatwg.org/#header-name\n */\nexport function isValidHeaderName(value: unknown) {\n  if (typeof value !== 'string') {\n    return false\n  }\n\n  if (value.length === 0) {\n    return false\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i)\n\n    if (character > 0x7f || !isToken(character)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction isToken(value: string | number): boolean {\n  return ![\n    0x7f,\n    0x20,\n    '(',\n    ')',\n    '<',\n    '>',\n    '@',\n    ',',\n    ';',\n    ':',\n    '\\\\',\n    '\"',\n    '/',\n    '[',\n    ']',\n    '?',\n    '=',\n    '{',\n    '}',\n  ].includes(value)\n}\n","/**\n * Validate the given header value.\n * @see https://fetch.spec.whatwg.org/#header-value\n */\nexport function isValidHeaderValue(value: unknown): boolean {\n  if (typeof value !== 'string') {\n    return false\n  }\n\n  if (value.trim() !== value) {\n    return false\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i)\n\n    if (\n      // NUL.\n      character === 0x00 ||\n      // HTTP newline bytes.\n      character === 0x0a ||\n      character === 0x0d\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","import statuses from '@bundled-es-modules/statuses'\nimport type { HttpResponseInit } from '../../HttpResponse'\nimport { Headers as HeadersPolyfill } from 'headers-polyfill'\n\nconst { message } = statuses\n\nexport interface HttpResponseDecoratedInit extends HttpResponseInit {\n  status: number\n  statusText: string\n  headers: Headers\n}\n\nexport function normalizeResponseInit(\n  init: HttpResponseInit = {},\n): HttpResponseDecoratedInit {\n  const status = init?.status || 200\n  const statusText = init?.statusText || message[status] || ''\n  const headers = new Headers(init?.headers)\n\n  return {\n    ...init,\n    headers,\n    status,\n    statusText,\n  }\n}\n\nexport function decorateResponse(\n  response: Response,\n  init: HttpResponseDecoratedInit,\n): Response {\n  // Allow to mock the response type.\n  if (init.type) {\n    Object.defineProperty(response, 'type', {\n      value: init.type,\n      enumerable: true,\n      writable: false,\n    })\n  }\n\n  // Cookie forwarding is only relevant in the browser.\n  if (typeof document !== 'undefined') {\n    // Write the mocked response cookies to the document.\n    // Use `headers-polyfill` to get the Set-Cookie header value correctly.\n    // This is an alternative until TypeScript 5.2\n    // and Node.js v20 become the minimum supported version\n    // and getSetCookie in Headers can be used directly.\n    const responseCookies = HeadersPolyfill.prototype.getSetCookie.call(\n      init.headers,\n    )\n\n    for (const cookieString of responseCookies) {\n      // No need to parse the cookie headers because it's defined\n      // as the valid cookie string to begin with.\n      document.cookie = cookieString\n    }\n  }\n\n  return response\n}\n","import type { DefaultBodyType, JsonBodyType } from './handlers/RequestHandler'\nimport type { NoInfer } from './typeUtils'\nimport {\n  decorateResponse,\n  normalizeResponseInit,\n} from './utils/HttpResponse/decorators'\n\nexport interface HttpResponseInit extends ResponseInit {\n  type?: ResponseType\n}\n\ndeclare const bodyType: unique symbol\n\nexport interface StrictRequest<BodyType extends DefaultBodyType>\n  extends Request {\n  json(): Promise<BodyType>\n}\n\n/**\n * Opaque `Response` type that supports strict body type.\n */\nexport interface StrictResponse<BodyType extends DefaultBodyType>\n  extends Response {\n  readonly [bodyType]: BodyType\n}\n\n/**\n * A drop-in replacement for the standard `Response` class\n * to allow additional features, like mocking the response `Set-Cookie` header.\n *\n * @example\n * new HttpResponse('Hello world', { status: 201 })\n * HttpResponse.json({ name: 'John' })\n * HttpResponse.formData(form)\n *\n * @see {@link https://mswjs.io/docs/api/http-response `HttpResponse` API reference}\n */\nexport class HttpResponse extends Response {\n  constructor(body?: BodyInit | null, init?: HttpResponseInit) {\n    const responseInit = normalizeResponseInit(init)\n    super(body, responseInit)\n    decorateResponse(this, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text<BodyType extends string>(\n    body?: NoInfer<BodyType> | null,\n    init?: HttpResponseInit,\n  ): StrictResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/plain')\n    }\n\n    // Automatically set the \"Content-Length\" response header\n    // for non-empty text responses. This enforces consistency and\n    // brings mocked responses closer to production.\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        body ? new Blob([body]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(body, responseInit) as StrictResponse<BodyType>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json<BodyType extends JsonBodyType>(\n    body?: NoInfer<BodyType> | null,\n    init?: HttpResponseInit,\n  ): StrictResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'application/json')\n    }\n\n    /**\n     * @note TypeScript is incorrect here.\n     * Stringifying undefined will return undefined.\n     */\n    const responseText = JSON.stringify(body) as string | undefined\n\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        responseText ? new Blob([responseText]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(\n      responseText,\n      responseInit,\n    ) as StrictResponse<BodyType>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): Response {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/xml')\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer(body?: ArrayBuffer, init?: HttpResponseInit): Response {\n    const responseInit = normalizeResponseInit(init)\n\n    if (body) {\n      responseInit.headers.set('Content-Length', body.byteLength.toString())\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(body?: FormData, init?: HttpResponseInit): Response {\n    return new HttpResponse(body, normalizeResponseInit(init))\n  }\n}\n","// Ignore the source files traces for local testing.\nconst SOURCE_FRAME = /[\\/\\\\]msw[\\/\\\\]src[\\/\\\\](.+)/\n\nconst BUILD_FRAME =\n  /(node_modules)?[\\/\\\\]lib[\\/\\\\](core|browser|node|native|iife)[\\/\\\\]|^[^\\/\\\\]*$/\n\n/**\n * Return the stack trace frame of a function's invocation.\n */\nexport function getCallFrame(error: Error) {\n  // In <IE11, new Error may return an undefined stack\n  const stack = error.stack\n\n  if (!stack) {\n    return\n  }\n\n  const frames: string[] = stack.split('\\n').slice(1)\n\n  // Get the first frame that doesn't reference the library's internal trace.\n  // Assume that frame is the invocation frame.\n  const declarationFrame = frames.find((frame) => {\n    return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame))\n  })\n\n  if (!declarationFrame) {\n    return\n  }\n\n  // Extract file reference from the stack frame.\n  const declarationPath = declarationFrame\n    .replace(/\\s*at [^()]*\\(([^)]+)\\)/, '$1')\n    .replace(/^@/, '')\n  return declarationPath\n}\n","import { invariant } from 'outvariant'\nimport { getCallFrame } from '../utils/internal/getCallFrame'\nimport { isIterable } from '../utils/internal/isIterable'\nimport type { ResponseResolutionContext } from '../utils/executeHandlers'\nimport type { MaybePromise } from '../typeUtils'\nimport { StrictRequest, StrictResponse } from '..//HttpResponse'\n\nexport type DefaultRequestMultipartBody = Record<\n  string,\n  string | File | Array<string | File>\n>\n\nexport type DefaultBodyType =\n  | Record<string, any>\n  | DefaultRequestMultipartBody\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\nexport type JsonBodyType =\n  | Record<string, any>\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\nexport interface RequestHandlerDefaultInfo {\n  header: string\n}\n\nexport interface RequestHandlerInternalInfo {\n  callFrame?: string\n}\n\nexport type ResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType = undefined,\n> =\n  | ([ResponseBodyType] extends [undefined]\n      ? Response\n      : StrictResponse<ResponseBodyType>)\n  | undefined\n  | void\n\nexport type MaybeAsyncResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType,\n> = MaybePromise<ResponseResolverReturnType<ResponseBodyType>>\n\nexport type AsyncResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType,\n> = MaybePromise<\n  | ResponseResolverReturnType<ResponseBodyType>\n  | Generator<\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>\n    >\n>\n\nexport type ResponseResolverInfo<\n  ResolverExtraInfo extends Record<string, unknown>,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n> = {\n  request: StrictRequest<RequestBodyType>\n  requestId: string\n} & ResolverExtraInfo\n\nexport type ResponseResolver<\n  ResolverExtraInfo extends Record<string, unknown> = Record<string, unknown>,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  ResponseBodyType extends DefaultBodyType = undefined,\n> = (\n  info: ResponseResolverInfo<ResolverExtraInfo, RequestBodyType>,\n) => AsyncResponseResolverReturnType<ResponseBodyType>\n\nexport interface RequestHandlerArgs<\n  HandlerInfo,\n  HandlerOptions extends RequestHandlerOptions,\n> {\n  info: HandlerInfo\n  resolver: ResponseResolver<any>\n  options?: HandlerOptions\n}\n\nexport interface RequestHandlerOptions {\n  once?: boolean\n}\n\nexport interface RequestHandlerExecutionResult<\n  ParsedResult extends Record<string, unknown> | undefined,\n> {\n  handler: RequestHandler\n  parsedResult?: ParsedResult\n  request: Request\n  requestId: string\n  response?: Response\n}\n\nexport abstract class RequestHandler<\n  HandlerInfo extends RequestHandlerDefaultInfo = RequestHandlerDefaultInfo,\n  ParsedResult extends Record<string, any> | undefined = any,\n  ResolverExtras extends Record<string, unknown> = any,\n  HandlerOptions extends RequestHandlerOptions = RequestHandlerOptions,\n> {\n  static cache = new WeakMap<\n    StrictRequest<DefaultBodyType>,\n    StrictRequest<DefaultBodyType>\n  >()\n\n  public info: HandlerInfo & RequestHandlerInternalInfo\n  /**\n   * Indicates whether this request handler has been used\n   * (its resolver has successfully executed).\n   */\n  public isUsed: boolean\n\n  protected resolver: ResponseResolver<ResolverExtras, any, any>\n  private resolverGenerator?: Generator<\n    MaybeAsyncResponseResolverReturnType<any>,\n    MaybeAsyncResponseResolverReturnType<any>,\n    MaybeAsyncResponseResolverReturnType<any>\n  >\n  private resolverGeneratorResult?: Response | StrictResponse<any>\n  private options?: HandlerOptions\n\n  constructor(args: RequestHandlerArgs<HandlerInfo, HandlerOptions>) {\n    this.resolver = args.resolver\n    this.options = args.options\n\n    const callFrame = getCallFrame(new Error())\n\n    this.info = {\n      ...args.info,\n      callFrame,\n    }\n\n    this.isUsed = false\n  }\n\n  /**\n   * Determine if the intercepted request should be mocked.\n   */\n  abstract predicate(args: {\n    request: Request\n    parsedResult: ParsedResult\n    resolutionContext?: ResponseResolutionContext\n  }): boolean\n\n  /**\n   * Print out the successfully handled request.\n   */\n  abstract log(args: {\n    request: Request\n    response: Response\n    parsedResult: ParsedResult\n  }): void\n\n  /**\n   * Parse the intercepted request to extract additional information from it.\n   * Parsed result is then exposed to other methods of this request handler.\n   */\n  async parse(_args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<ParsedResult> {\n    return {} as ParsedResult\n  }\n\n  /**\n   * Test if this handler matches the given request.\n   *\n   * This method is not used internally but is exposed\n   * as a convenience method for consumers writing custom\n   * handlers.\n   */\n  public async test(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<boolean> {\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext,\n    })\n\n    return this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext,\n    })\n  }\n\n  protected extendResolverArgs(_args: {\n    request: Request\n    parsedResult: ParsedResult\n  }): ResolverExtras {\n    return {} as ResolverExtras\n  }\n\n  // Clone the request instance before it's passed to the handler phases\n  // and the response resolver so we can always read it for logging.\n  // We only clone it once per request to avoid unnecessary overhead.\n  private cloneRequestOrGetFromCache(\n    request: StrictRequest<DefaultBodyType>,\n  ): StrictRequest<DefaultBodyType> {\n    const existingClone = RequestHandler.cache.get(request)\n\n    if (typeof existingClone !== 'undefined') {\n      return existingClone\n    }\n\n    const clonedRequest = request.clone()\n    RequestHandler.cache.set(request, clonedRequest)\n\n    return clonedRequest\n  }\n\n  /**\n   * Execute this request handler and produce a mocked response\n   * using the given resolver function.\n   */\n  public async run(args: {\n    request: StrictRequest<any>\n    requestId: string\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<RequestHandlerExecutionResult<ParsedResult> | null> {\n    if (this.isUsed && this.options?.once) {\n      return null\n    }\n\n    // Clone the request.\n    // If this is the first time MSW handles this request, a fresh clone\n    // will be created and cached. Upon further handling of the same request,\n    // the request clone from the cache will be reused to prevent abundant\n    // \"abort\" listeners and save up resources on cloning.\n    const requestClone = this.cloneRequestOrGetFromCache(args.request)\n\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext,\n    })\n    const shouldInterceptRequest = this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext,\n    })\n\n    if (!shouldInterceptRequest) {\n      return null\n    }\n\n    // Re-check isUsed, in case another request hit this handler while we were\n    // asynchronously parsing the request.\n    if (this.isUsed && this.options?.once) {\n      return null\n    }\n\n    this.isUsed = true\n\n    // Create a response extraction wrapper around the resolver\n    // since it can be both an async function and a generator.\n    const executeResolver = this.wrapResolver(this.resolver)\n\n    const resolverExtras = this.extendResolverArgs({\n      request: args.request,\n      parsedResult,\n    })\n\n    const mockedResponsePromise = (\n      executeResolver({\n        ...resolverExtras,\n        requestId: args.requestId,\n        request: args.request,\n      }) as Promise<Response>\n    ).catch((errorOrResponse) => {\n      // Allow throwing a Response instance in a response resolver.\n      if (errorOrResponse instanceof Response) {\n        return errorOrResponse\n      }\n\n      // Otherwise, throw the error as-is.\n      throw errorOrResponse\n    })\n\n    const mockedResponse = await mockedResponsePromise\n\n    const executionResult = this.createExecutionResult({\n      // Pass the cloned request to the result so that logging\n      // and other consumers could read its body once more.\n      request: requestClone,\n      requestId: args.requestId,\n      response: mockedResponse,\n      parsedResult,\n    })\n\n    return executionResult\n  }\n\n  private wrapResolver(\n    resolver: ResponseResolver<ResolverExtras>,\n  ): ResponseResolver<ResolverExtras> {\n    return async (info): Promise<ResponseResolverReturnType<any>> => {\n      const result = this.resolverGenerator || (await resolver(info))\n\n      if (isIterable<AsyncResponseResolverReturnType<any>>(result)) {\n        // Immediately mark this handler as unused.\n        // Only when the generator is done, the handler will be\n        // considered used.\n        this.isUsed = false\n\n        const { value, done } = result[Symbol.iterator]().next()\n        const nextResponse = await value\n\n        if (done) {\n          this.isUsed = true\n        }\n\n        // If the generator is done and there is no next value,\n        // return the previous generator's value.\n        if (!nextResponse && done) {\n          invariant(\n            this.resolverGeneratorResult,\n            'Failed to returned a previously stored generator response: the value is not a valid Response.',\n          )\n\n          // Clone the previously stored response from the generator\n          // so that it could be read again.\n          return this.resolverGeneratorResult.clone() as StrictResponse<any>\n        }\n\n        if (!this.resolverGenerator) {\n          this.resolverGenerator = result\n        }\n\n        if (nextResponse) {\n          // Also clone the response before storing it\n          // so it could be read again.\n          this.resolverGeneratorResult = nextResponse?.clone()\n        }\n\n        return nextResponse\n      }\n\n      return result\n    }\n  }\n\n  private createExecutionResult(args: {\n    request: Request\n    requestId: string\n    parsedResult: ParsedResult\n    response?: Response\n  }): RequestHandlerExecutionResult<ParsedResult> {\n    return {\n      handler: this,\n      request: args.request,\n      requestId: args.requestId,\n      response: args.response,\n      parsedResult: args.parsedResult,\n    }\n  }\n}\n","/**\n * Determines if the given function is an iterator.\n */\nexport function isIterable<IteratorType>(\n  fn: any,\n): fn is Generator<IteratorType, IteratorType, IteratorType> {\n  if (!fn) {\n    return false\n  }\n\n  return typeof (fn as Generator<unknown>)[Symbol.iterator] == 'function'\n}\n","import statuses from '@bundled-es-modules/statuses'\n\nconst { message } = statuses\n\nexport interface SerializedResponse {\n  status: number\n  statusText: string\n  headers: Record<string, any>\n  body: string\n}\n\nexport async function serializeResponse(\n  response: Response,\n): Promise<SerializedResponse> {\n  const responseClone = response.clone()\n  const responseText = await responseClone.text()\n\n  // Normalize the response status and status text when logging\n  // since the default Response instance doesn't infer status texts\n  // from status codes. This has no effect on the actual response instance.\n  const responseStatus = responseClone.status || 200\n  const responseStatusText =\n    responseClone.statusText || message[responseStatus] || 'OK'\n\n  return {\n    status: responseStatus,\n    statusText: responseStatusText,\n    headers: Object.fromEntries(responseClone.headers.entries()),\n    body: responseText,\n  }\n}\n","/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += `((?:${token.pattern})${token.modifier})`;\n          } else {\n            route += `(${token.pattern})${token.modifier}`;\n          }\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n","const encoder = new TextEncoder()\n\nexport function encodeBuffer(text: string): Uint8Array {\n  return encoder.encode(text)\n}\n\nexport function decodeBuffer(buffer: ArrayBuffer, encoding?: string): string {\n  const decoder = new TextDecoder(encoding)\n  return decoder.decode(buffer)\n}\n\n/**\n * Create an `ArrayBuffer` from the given `Uint8Array`.\n * Takes the byte offset into account to produce the right buffer\n * in the case when the buffer is bigger than the data view.\n */\nexport function toArrayBuffer(array: Uint8Array): ArrayBuffer {\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteOffset + array.byteLength\n  )\n}\n","import type { InteractiveRequest } from './utils/toInteractiveRequest'\n\nexport const IS_PATCHED_MODULE: unique symbol = Symbol('isPatchedModule')\n\nexport type RequestCredentials = 'omit' | 'include' | 'same-origin'\n\nexport type HttpRequestEventMap = {\n  request: [\n    args: {\n      request: InteractiveRequest\n      requestId: string\n    }\n  ]\n  response: [\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ]\n}\n","var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/index.ts\nimport { isNodeProcess } from \"is-node-process\";\nimport { format } from \"outvariant\";\n\n// src/colors.ts\nvar colors_exports = {};\n__export(colors_exports, {\n  blue: () => blue,\n  gray: () => gray,\n  green: () => green,\n  red: () => red,\n  yellow: () => yellow\n});\nfunction yellow(text) {\n  return `\\x1B[33m${text}\\x1B[0m`;\n}\nfunction blue(text) {\n  return `\\x1B[34m${text}\\x1B[0m`;\n}\nfunction gray(text) {\n  return `\\x1B[90m${text}\\x1B[0m`;\n}\nfunction red(text) {\n  return `\\x1B[31m${text}\\x1B[0m`;\n}\nfunction green(text) {\n  return `\\x1B[32m${text}\\x1B[0m`;\n}\n\n// src/index.ts\nvar IS_NODE = isNodeProcess();\nvar Logger = class {\n  constructor(name) {\n    this.name = name;\n    this.prefix = `[${this.name}]`;\n    const LOGGER_NAME = getVariable(\"DEBUG\");\n    const LOGGER_LEVEL = getVariable(\"LOG_LEVEL\");\n    const isLoggingEnabled = LOGGER_NAME === \"1\" || LOGGER_NAME === \"true\" || typeof LOGGER_NAME !== \"undefined\" && this.name.startsWith(LOGGER_NAME);\n    if (isLoggingEnabled) {\n      this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, \"debug\") ? noop : this.debug;\n      this.info = isDefinedAndNotEquals(LOGGER_LEVEL, \"info\") ? noop : this.info;\n      this.success = isDefinedAndNotEquals(LOGGER_LEVEL, \"success\") ? noop : this.success;\n      this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, \"warning\") ? noop : this.warning;\n      this.error = isDefinedAndNotEquals(LOGGER_LEVEL, \"error\") ? noop : this.error;\n    } else {\n      this.info = noop;\n      this.success = noop;\n      this.warning = noop;\n      this.error = noop;\n      this.only = noop;\n    }\n  }\n  prefix;\n  extend(domain) {\n    return new Logger(`${this.name}:${domain}`);\n  }\n  /**\n   * Print a debug message.\n   * @example\n   * logger.debug('no duplicates found, creating a document...')\n   */\n  debug(message, ...positionals) {\n    this.logEntry({\n      level: \"debug\",\n      message: gray(message),\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"gray\"\n      }\n    });\n  }\n  /**\n   * Print an info message.\n   * @example\n   * logger.info('start parsing...')\n   */\n  info(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"blue\"\n      }\n    });\n    const performance2 = new PerformanceEntry();\n    return (message2, ...positionals2) => {\n      performance2.measure();\n      this.logEntry({\n        level: \"info\",\n        message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,\n        positionals: positionals2,\n        prefix: this.prefix,\n        colors: {\n          prefix: \"blue\"\n        }\n      });\n    };\n  }\n  /**\n   * Print a success message.\n   * @example\n   * logger.success('successfully created document')\n   */\n  success(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: `\\u2714 ${this.prefix}`,\n      colors: {\n        timestamp: \"green\",\n        prefix: \"green\"\n      }\n    });\n  }\n  /**\n   * Print a warning.\n   * @example\n   * logger.warning('found legacy document format')\n   */\n  warning(message, ...positionals) {\n    this.logEntry({\n      level: \"warning\",\n      message,\n      positionals,\n      prefix: `\\u26A0 ${this.prefix}`,\n      colors: {\n        timestamp: \"yellow\",\n        prefix: \"yellow\"\n      }\n    });\n  }\n  /**\n   * Print an error message.\n   * @example\n   * logger.error('something went wrong')\n   */\n  error(message, ...positionals) {\n    this.logEntry({\n      level: \"error\",\n      message,\n      positionals,\n      prefix: `\\u2716 ${this.prefix}`,\n      colors: {\n        timestamp: \"red\",\n        prefix: \"red\"\n      }\n    });\n  }\n  /**\n   * Execute the given callback only when the logging is enabled.\n   * This is skipped in its entirety and has no runtime cost otherwise.\n   * This executes regardless of the log level.\n   * @example\n   * logger.only(() => {\n   *   logger.info('additional info')\n   * })\n   */\n  only(callback) {\n    callback();\n  }\n  createEntry(level, message) {\n    return {\n      timestamp: /* @__PURE__ */ new Date(),\n      level,\n      message\n    };\n  }\n  logEntry(args) {\n    const {\n      level,\n      message,\n      prefix,\n      colors: customColors,\n      positionals = []\n    } = args;\n    const entry = this.createEntry(level, message);\n    const timestampColor = customColors?.timestamp || \"gray\";\n    const prefixColor = customColors?.prefix || \"gray\";\n    const colorize = {\n      timestamp: colors_exports[timestampColor],\n      prefix: colors_exports[prefixColor]\n    };\n    const write = this.getWriter(level);\n    write(\n      [colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(\" \"),\n      ...positionals.map(serializeInput)\n    );\n  }\n  formatTimestamp(timestamp) {\n    return `${timestamp.toLocaleTimeString(\n      \"en-GB\"\n    )}:${timestamp.getMilliseconds()}`;\n  }\n  getWriter(level) {\n    switch (level) {\n      case \"debug\":\n      case \"success\":\n      case \"info\": {\n        return log;\n      }\n      case \"warning\": {\n        return warn;\n      }\n      case \"error\": {\n        return error;\n      }\n    }\n  }\n};\nvar PerformanceEntry = class {\n  startTime;\n  endTime;\n  deltaTime;\n  constructor() {\n    this.startTime = performance.now();\n  }\n  measure() {\n    this.endTime = performance.now();\n    const deltaTime = this.endTime - this.startTime;\n    this.deltaTime = deltaTime.toFixed(2);\n  }\n};\nvar noop = () => void 0;\nfunction log(message, ...positionals) {\n  if (IS_NODE) {\n    process.stdout.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.log(message, ...positionals);\n}\nfunction warn(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.warn(message, ...positionals);\n}\nfunction error(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.error(message, ...positionals);\n}\nfunction getVariable(variableName) {\n  if (IS_NODE) {\n    return process.env[variableName];\n  }\n  return globalThis[variableName]?.toString();\n}\nfunction isDefinedAndNotEquals(value, expected) {\n  return value !== void 0 && value !== expected;\n}\nfunction serializeInput(message) {\n  if (typeof message === \"undefined\") {\n    return \"undefined\";\n  }\n  if (message === null) {\n    return \"null\";\n  }\n  if (typeof message === \"string\") {\n    return message;\n  }\n  if (typeof message === \"object\") {\n    return JSON.stringify(message);\n  }\n  return message.toString();\n}\nexport {\n  Logger\n};\n","/**\n * Determines if the current process is a Node.js process.\n */\nexport function isNodeProcess(): boolean {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return true\n  }\n\n  if (typeof process !== 'undefined') {\n    // Electron (https://www.electronjs.org/docs/latest/api/process#processtype-readonly)\n    const type = (process as any).type\n    if (type === 'renderer' || type === 'worker') {\n      return false\n    }\n\n\n    return !!(\n      process.versions &&\n      process.versions.node\n    )\n  }\n\n  return false\n}\n","const REDUNDANT_CHARACTERS_EXP = /[\\?|#].*$/g\n\nexport function getSearchParams(path: string) {\n  return new URL(`/${path}`, 'http://localhost').searchParams\n}\n\n/**\n * Removes query parameters and hashes from a given URL string.\n */\nexport function cleanUrl(path: string): string {\n  return path.replace(REDUNDANT_CHARACTERS_EXP, '')\n}\n","import type { Path } from './matchRequestUrl'\nimport { cleanUrl } from '../url/cleanUrl'\nimport { getAbsoluteUrl } from '../url/getAbsoluteUrl'\n\n/**\n * Normalizes a given request handler path:\n * - Preserves RegExp.\n * - Removes query parameters and hashes.\n * - Rebases relative URLs against the \"baseUrl\" or the current location.\n * - Preserves relative URLs in Node.js, unless specified otherwise.\n */\nexport function normalizePath(path: Path, baseUrl?: string): Path {\n  // RegExp paths do not need normalization.\n  if (path instanceof RegExp) {\n    return path\n  }\n\n  const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl)\n\n  return cleanUrl(maybeAbsoluteUrl)\n}\n","import { isAbsoluteUrl } from './isAbsoluteUrl'\n\n/**\n * Returns an absolute URL based on the given path.\n */\nexport function getAbsoluteUrl(path: string, baseUrl?: string): string {\n  // already absolute URL\n  if (isAbsoluteUrl(path)) {\n    return path\n  }\n\n  // Ignore path with pattern start with *\n  if (path.startsWith('*')) {\n    return path\n  }\n\n  // Resolve a relative request URL against a given custom \"baseUrl\"\n  // or the document baseURI (in the case of browser/browser-like environments).\n  const origin =\n    baseUrl || (typeof document !== 'undefined' && document.baseURI)\n\n  return origin\n    ? // Encode and decode the path to preserve escaped characters.\n      decodeURI(new URL(encodeURI(path), origin).href)\n    : path\n}\n","/**\n * Determines if the given URL string is an absolute URL.\n */\nexport function isAbsoluteUrl(url: string): boolean {\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url)\n}\n","import { match } from 'path-to-regexp'\nimport { getCleanUrl } from '@mswjs/interceptors'\nimport { normalizePath } from './normalizePath'\n\nexport type Path = string | RegExp\nexport type PathParams<KeyType extends keyof any = string> = {\n  [ParamName in KeyType]: string | ReadonlyArray<string>\n}\n\nexport interface Match {\n  matches: boolean\n  params?: PathParams\n}\n\n/**\n * Coerce a path supported by MSW into a path\n * supported by \"path-to-regexp\".\n */\nexport function coercePath(path: string): string {\n  return (\n    path\n      /**\n       * Replace wildcards (\"*\") with unnamed capturing groups\n       * because \"path-to-regexp\" doesn't support wildcards.\n       * Ignore path parameter' modifiers (i.e. \":name*\").\n       */\n      .replace(\n        /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n        (_, parameterName: string | undefined, wildcard: string) => {\n          const expression = '(.*)'\n\n          if (!parameterName) {\n            return expression\n          }\n\n          return parameterName.startsWith(':')\n            ? `${parameterName}${wildcard}`\n            : `${parameterName}${expression}`\n        },\n      )\n      /**\n       * Escape the port so that \"path-to-regexp\" can match\n       * absolute URLs including port numbers.\n       */\n      .replace(/([^\\/])(:)(?=\\d+)/, '$1\\\\$2')\n      /**\n       * Escape the protocol so that \"path-to-regexp\" could match\n       * absolute URL.\n       * @see https://github.com/pillarjs/path-to-regexp/issues/259\n       */\n      .replace(/^([^\\/]+)(:)(?=\\/\\/)/, '$1\\\\$2')\n  )\n}\n\n/**\n * Returns the result of matching given request URL against a mask.\n */\nexport function matchRequestUrl(url: URL, path: Path, baseUrl?: string): Match {\n  const normalizedPath = normalizePath(path, baseUrl)\n  const cleanPath =\n    typeof normalizedPath === 'string'\n      ? coercePath(normalizedPath)\n      : normalizedPath\n\n  const cleanUrl = getCleanUrl(url)\n  const result = match(cleanPath, { decode: decodeURIComponent })(cleanUrl)\n  const params = (result && (result.params as PathParams)) || {}\n\n  return {\n    matches: result !== false,\n    params,\n  }\n}\n","/**\n * Removes query parameters and hashes from a given URL.\n */\nexport function getCleanUrl(url: URL, isAbsolute: boolean = true): string {\n  return [isAbsolute && url.origin, url.pathname].filter(Boolean).join('')\n}\n","var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/cookie/index.js\nvar require_cookie = __commonJS({\n  \"node_modules/cookie/index.js\"(exports) {\n    \"use strict\";\n    exports.parse = parse;\n    exports.serialize = serialize;\n    var __toString = Object.prototype.toString;\n    var fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n    function parse(str, options) {\n      if (typeof str !== \"string\") {\n        throw new TypeError(\"argument str must be a string\");\n      }\n      var obj = {};\n      var opt = options || {};\n      var dec = opt.decode || decode;\n      var index = 0;\n      while (index < str.length) {\n        var eqIdx = str.indexOf(\"=\", index);\n        if (eqIdx === -1) {\n          break;\n        }\n        var endIdx = str.indexOf(\";\", index);\n        if (endIdx === -1) {\n          endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n          index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n          continue;\n        }\n        var key = str.slice(index, eqIdx).trim();\n        if (void 0 === obj[key]) {\n          var val = str.slice(eqIdx + 1, endIdx).trim();\n          if (val.charCodeAt(0) === 34) {\n            val = val.slice(1, -1);\n          }\n          obj[key] = tryDecode(val, dec);\n        }\n        index = endIdx + 1;\n      }\n      return obj;\n    }\n    function serialize(name, val, options) {\n      var opt = options || {};\n      var enc = opt.encode || encode;\n      if (typeof enc !== \"function\") {\n        throw new TypeError(\"option encode is invalid\");\n      }\n      if (!fieldContentRegExp.test(name)) {\n        throw new TypeError(\"argument name is invalid\");\n      }\n      var value = enc(val);\n      if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError(\"argument val is invalid\");\n      }\n      var str = name + \"=\" + value;\n      if (null != opt.maxAge) {\n        var maxAge = opt.maxAge - 0;\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n          throw new TypeError(\"option maxAge is invalid\");\n        }\n        str += \"; Max-Age=\" + Math.floor(maxAge);\n      }\n      if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n          throw new TypeError(\"option domain is invalid\");\n        }\n        str += \"; Domain=\" + opt.domain;\n      }\n      if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n          throw new TypeError(\"option path is invalid\");\n        }\n        str += \"; Path=\" + opt.path;\n      }\n      if (opt.expires) {\n        var expires = opt.expires;\n        if (!isDate(expires) || isNaN(expires.valueOf())) {\n          throw new TypeError(\"option expires is invalid\");\n        }\n        str += \"; Expires=\" + expires.toUTCString();\n      }\n      if (opt.httpOnly) {\n        str += \"; HttpOnly\";\n      }\n      if (opt.secure) {\n        str += \"; Secure\";\n      }\n      if (opt.priority) {\n        var priority = typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n        switch (priority) {\n          case \"low\":\n            str += \"; Priority=Low\";\n            break;\n          case \"medium\":\n            str += \"; Priority=Medium\";\n            break;\n          case \"high\":\n            str += \"; Priority=High\";\n            break;\n          default:\n            throw new TypeError(\"option priority is invalid\");\n        }\n      }\n      if (opt.sameSite) {\n        var sameSite = typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n        switch (sameSite) {\n          case true:\n            str += \"; SameSite=Strict\";\n            break;\n          case \"lax\":\n            str += \"; SameSite=Lax\";\n            break;\n          case \"strict\":\n            str += \"; SameSite=Strict\";\n            break;\n          case \"none\":\n            str += \"; SameSite=None\";\n            break;\n          default:\n            throw new TypeError(\"option sameSite is invalid\");\n        }\n      }\n      return str;\n    }\n    function decode(str) {\n      return str.indexOf(\"%\") !== -1 ? decodeURIComponent(str) : str;\n    }\n    function encode(val) {\n      return encodeURIComponent(val);\n    }\n    function isDate(val) {\n      return __toString.call(val) === \"[object Date]\" || val instanceof Date;\n    }\n    function tryDecode(str, decode2) {\n      try {\n        return decode2(str);\n      } catch (e) {\n        return str;\n      }\n    }\n  }\n});\n\n// source.js\nvar import_cookie = __toESM(require_cookie(), 1);\nvar source_default = import_cookie.default;\nexport {\n  source_default as default\n};\n/*! Bundled license information:\n\ncookie/index.js:\n  (*!\n   * cookie\n   * Copyright(c) 2012-2014 Roman Shtylman\n   * Copyright(c) 2015 Douglas Christopher Wilson\n   * MIT Licensed\n   *)\n*/\n","import cookieUtils from '@bundled-es-modules/cookie'\nimport { store } from '@mswjs/cookies'\n\nfunction getAllDocumentCookies() {\n  return cookieUtils.parse(document.cookie)\n}\n\n/** @todo Rename this to \"getDocumentCookies\" */\n/**\n * Returns relevant document cookies based on the request `credentials` option.\n */\nexport function getRequestCookies(request: Request): Record<string, string> {\n  /**\n   * @note No cookies persist on the document in Node.js: no document.\n   */\n  if (typeof document === 'undefined' || typeof location === 'undefined') {\n    return {}\n  }\n\n  switch (request.credentials) {\n    case 'same-origin': {\n      const url = new URL(request.url)\n\n      // Return document cookies only when requested a resource\n      // from the same origin as the current document.\n      return location.origin === url.origin ? getAllDocumentCookies() : {}\n    }\n\n    case 'include': {\n      // Return all document cookies.\n      return getAllDocumentCookies()\n    }\n\n    default: {\n      return {}\n    }\n  }\n}\n\nexport function getAllRequestCookies(request: Request): Record<string, string> {\n  const requestCookiesString = request.headers.get('cookie')\n  const cookiesFromHeaders = requestCookiesString\n    ? cookieUtils.parse(requestCookiesString)\n    : {}\n\n  store.hydrate()\n\n  const cookiesFromStore = Array.from(store.get(request)?.entries()).reduce<\n    Record<string, string>\n  >((cookies, [name, { value }]) => {\n    return Object.assign(cookies, { [name.trim()]: value })\n  }, {})\n\n  const cookiesFromDocument = getRequestCookies(request)\n\n  const forwardedCookies = {\n    ...cookiesFromDocument,\n    ...cookiesFromStore,\n  }\n\n  // Set the inferred cookies from the cookie store and the document\n  // on the request's headers.\n  /**\n   * @todo Consider making this a separate step so this function\n   * is pure-er.\n   */\n  for (const [name, value] of Object.entries(forwardedCookies)) {\n    request.headers.append('cookie', cookieUtils.serialize(name, value))\n  }\n\n  return {\n    ...forwardedCookies,\n    ...cookiesFromHeaders,\n  }\n}\n","import { ResponseResolutionContext } from '../utils/executeHandlers'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { isStringEqual } from '../utils/internal/isStringEqual'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { serializeRequest } from '../utils/logging/serializeRequest'\nimport { serializeResponse } from '../utils/logging/serializeResponse'\nimport {\n  matchRequestUrl,\n  Match,\n  Path,\n  PathParams,\n} from '../utils/matching/matchRequestUrl'\nimport { toPublicUrl } from '../utils/request/toPublicUrl'\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies'\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './RequestHandler'\n\ntype HttpHandlerMethod = string | RegExp\n\nexport interface HttpHandlerInfo extends RequestHandlerDefaultInfo {\n  method: HttpHandlerMethod\n  path: Path\n}\n\nexport enum HttpMethods {\n  HEAD = 'HEAD',\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  OPTIONS = 'OPTIONS',\n  DELETE = 'DELETE',\n}\n\nexport type RequestQuery = {\n  [queryName: string]: string\n}\n\nexport type HttpRequestParsedResult = {\n  match: Match\n  cookies: Record<string, string>\n}\n\nexport type HttpRequestResolverExtras<Params extends PathParams> = {\n  params: Params\n  cookies: Record<string, string>\n}\n\n/**\n * Request handler for HTTP requests.\n * Provides request matching based on method and URL.\n */\nexport class HttpHandler extends RequestHandler<\n  HttpHandlerInfo,\n  HttpRequestParsedResult,\n  HttpRequestResolverExtras<any>\n> {\n  constructor(\n    method: HttpHandlerMethod,\n    path: Path,\n    resolver: ResponseResolver<HttpRequestResolverExtras<any>, any, any>,\n    options?: RequestHandlerOptions,\n  ) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method,\n      },\n      resolver,\n      options,\n    })\n\n    this.checkRedundantQueryParameters()\n  }\n\n  private checkRedundantQueryParameters() {\n    const { method, path } = this.info\n\n    if (path instanceof RegExp) {\n      return\n    }\n\n    const url = cleanUrl(path)\n\n    // Bypass request handler URLs that have no redundant characters.\n    if (url === path) {\n      return\n    }\n\n    const searchParams = getSearchParams(path)\n    const queryParams: string[] = []\n\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName)\n    })\n\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters using \"new URL(request.url).searchParams\" instead. Learn more: https://mswjs.io/docs/recipes/query-parameters`,\n    )\n  }\n\n  async parse(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }) {\n    const url = new URL(args.request.url)\n    const match = matchRequestUrl(\n      url,\n      this.info.path,\n      args.resolutionContext?.baseUrl,\n    )\n    const cookies = getAllRequestCookies(args.request)\n\n    return {\n      match,\n      cookies,\n    }\n  }\n\n  predicate(args: { request: Request; parsedResult: HttpRequestParsedResult }) {\n    const hasMatchingMethod = this.matchMethod(args.request.method)\n    const hasMatchingUrl = args.parsedResult.match.matches\n    return hasMatchingMethod && hasMatchingUrl\n  }\n\n  private matchMethod(actualMethod: string): boolean {\n    return this.info.method instanceof RegExp\n      ? this.info.method.test(actualMethod)\n      : isStringEqual(this.info.method, actualMethod)\n  }\n\n  protected extendResolverArgs(args: {\n    request: Request\n    parsedResult: HttpRequestParsedResult\n  }) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies,\n    }\n  }\n\n  async log(args: { request: Request; response: Response }) {\n    const publicUrl = toPublicUrl(args.request.url)\n    const loggedRequest = await serializeRequest(args.request)\n    const loggedResponse = await serializeResponse(args.response)\n    const statusColor = getStatusCodeColor(loggedResponse.status)\n\n    console.groupCollapsed(\n      devUtils.formatMessage(\n        `${getTimestamp()} ${args.request.method} ${publicUrl} (%c${\n          loggedResponse.status\n        } ${loggedResponse.statusText}%c)`,\n      ),\n      `color:${statusColor}`,\n      'color:inherit',\n    )\n    console.log('Request', loggedRequest)\n    console.log('Handler:', this)\n    console.log('Response', loggedResponse)\n    console.groupEnd()\n  }\n}\n","/**\n * Performs a case-insensitive comparison of two given strings.\n */\nexport function isStringEqual(actual: string, expected: string): boolean {\n  return actual.toLowerCase() === expected.toLowerCase()\n}\n","export interface LoggedRequest {\n  url: URL\n  method: string\n  headers: Record<string, string>\n  body: string\n}\n\n/**\n * Formats a mocked request for introspection in browser's console.\n */\nexport async function serializeRequest(\n  request: Request,\n): Promise<LoggedRequest> {\n  const requestClone = request.clone()\n  const requestText = await requestClone.text()\n\n  return {\n    url: new URL(request.url),\n    method: request.method,\n    headers: Object.fromEntries(request.headers.entries()),\n    body: requestText,\n  }\n}\n","export enum StatusCodeColor {\n  Success = '#69AB32',\n  Warning = '#F0BB4B',\n  Danger = '#E95F5D',\n}\n\n/**\n * Returns a HEX color for a given response status code number.\n */\nexport function getStatusCodeColor(status: number): StatusCodeColor {\n  if (status < 300) {\n    return StatusCodeColor.Success\n  }\n\n  if (status < 400) {\n    return StatusCodeColor.Warning\n  }\n\n  return StatusCodeColor.Danger\n}\n","/**\n * Returns a timestamp string in a \"HH:MM:SS\" format.\n */\nexport function getTimestamp(): string {\n  const now = new Date()\n\n  return [now.getHours(), now.getMinutes(), now.getSeconds()]\n    .map(String)\n    .map((chunk) => chunk.slice(0, 2))\n    .map((chunk) => chunk.padStart(2, '0'))\n    .join(':')\n}\n","import {\n  DefaultBodyType,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './handlers/RequestHandler'\nimport {\n  HttpMethods,\n  HttpHandler,\n  HttpRequestResolverExtras,\n} from './handlers/HttpHandler'\nimport type { Path, PathParams } from './utils/matching/matchRequestUrl'\n\nexport type HttpRequestHandler = <\n  Params extends PathParams<keyof Params> = PathParams,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  // Response body type MUST be undefined by default.\n  // This is how we can distinguish between a handler that\n  // returns plain \"Response\" and the one returning \"HttpResponse\"\n  // to enforce a stricter response body type.\n  ResponseBodyType extends DefaultBodyType = undefined,\n  RequestPath extends Path = Path,\n>(\n  path: RequestPath,\n  resolver: HttpResponseResolver<Params, RequestBodyType, ResponseBodyType>,\n  options?: RequestHandlerOptions,\n) => HttpHandler\n\nexport type HttpResponseResolver<\n  Params extends PathParams<keyof Params> = PathParams,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  ResponseBodyType extends DefaultBodyType = DefaultBodyType,\n> = ResponseResolver<\n  HttpRequestResolverExtras<Params>,\n  RequestBodyType,\n  ResponseBodyType\n>\n\nfunction createHttpHandler<Method extends HttpMethods | RegExp>(\n  method: Method,\n): HttpRequestHandler {\n  return (path, resolver, options = {}) => {\n    return new HttpHandler(method, path, resolver, options)\n  }\n}\n\n/**\n * A namespace to intercept and mock HTTP requests.\n *\n * @example\n * http.get('/user', resolver)\n * http.post('/post/:id', resolver)\n *\n * @see {@link https://mswjs.io/docs/api/http `http` API reference}\n */\nexport const http = {\n  all: createHttpHandler(/.+/),\n  head: createHttpHandler(HttpMethods.HEAD),\n  get: createHttpHandler(HttpMethods.GET),\n  post: createHttpHandler(HttpMethods.POST),\n  put: createHttpHandler(HttpMethods.PUT),\n  delete: createHttpHandler(HttpMethods.DELETE),\n  patch: createHttpHandler(HttpMethods.PATCH),\n  options: createHttpHandler(HttpMethods.OPTIONS),\n}\n","import { format } from 'outvariant'\n\nconst LIBRARY_PREFIX = '[MSW]'\n\n/**\n * Formats a given message by appending the library's prefix string.\n */\nfunction formatMessage(message: string, ...positionals: any[]): string {\n  const interpolatedMessage = format(message, ...positionals)\n  return `${LIBRARY_PREFIX} ${interpolatedMessage}`\n}\n\n/**\n * Prints a library-specific warning.\n */\nfunction warn(message: string, ...positionals: any[]): void {\n  console.warn(formatMessage(message, ...positionals))\n}\n\n/**\n * Prints a library-specific error.\n */\nfunction error(message: string, ...positionals: any[]): void {\n  console.error(formatMessage(message, ...positionals))\n}\n\nexport const devUtils = {\n  formatMessage,\n  warn,\n  error,\n}\n","/**\n * Returns a relative URL if the given request URL is relative\n * to the current origin. Otherwise returns an absolute URL.\n */\nexport function toPublicUrl(url: string | URL): string {\n  if (typeof location === 'undefined') {\n    return url.toString()\n  }\n\n  const urlInstance = url instanceof URL ? url : new URL(url)\n\n  return urlInstance.origin === location.origin\n    ? urlInstance.pathname\n    : urlInstance.origin + urlInstance.pathname\n}\n","const POSITIONALS_EXP = /(%?)(%([sdijo]))/g\n\nfunction serializePositional(positional: any, flag: string): any {\n  switch (flag) {\n    // Strings.\n    case 's':\n      return positional\n\n    // Digits.\n    case 'd':\n    case 'i':\n      return Number(positional)\n\n    // JSON.\n    case 'j':\n      return JSON.stringify(positional)\n\n    // Objects.\n    case 'o': {\n      // Preserve stings to prevent extra quotes around them.\n      if (typeof positional === 'string') {\n        return positional\n      }\n\n      const json = JSON.stringify(positional)\n\n      // If the positional isn't serializable, return it as-is.\n      if (json === '{}' || json === '[]' || /^\\[object .+?\\]$/.test(json)) {\n        return positional\n      }\n\n      return json\n    }\n  }\n}\n\nexport function format(message: string, ...positionals: any[]): string {\n  if (positionals.length === 0) {\n    return message\n  }\n\n  let positionalIndex = 0\n  let formattedMessage = message.replace(\n    POSITIONALS_EXP,\n    (match, isEscaped, _, flag) => {\n      const positional = positionals[positionalIndex]\n      const value = serializePositional(positional, flag)\n\n      if (!isEscaped) {\n        positionalIndex++\n        return value\n      }\n\n      return match\n    }\n  )\n\n  // Append unresolved positionals to string as-is.\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(' ')}`\n  }\n\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, '%')\n\n  return formattedMessage\n}\n","import { format } from './format'\n\nconst STACK_FRAMES_TO_IGNORE = 2\n\n/**\n * Remove the \"outvariant\" package trace from the given error.\n * This scopes down the error stack to the relevant parts\n * when used in other applications.\n */\nfunction cleanErrorStack(error: Error): void {\n  if (!error.stack) {\n    return\n  }\n\n  const nextStack = error.stack.split('\\n')\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE)\n  error.stack = nextStack.join('\\n')\n}\n\nexport class InvariantError extends Error {\n  name = 'Invariant Violation'\n\n  constructor(public readonly message: string, ...positionals: any[]) {\n    super(message)\n    this.message = format(message, ...positionals)\n    cleanErrorStack(this)\n  }\n}\n\nexport interface CustomErrorConstructor {\n  new (message: string): Error\n}\n\nexport interface CustomErrorFactory {\n  (message: string): Error\n}\n\nexport type CustomError = CustomErrorConstructor | CustomErrorFactory\n\ntype Invariant = {\n  (\n    predicate: unknown,\n    message: string,\n    ...positionals: any[]\n  ): asserts predicate\n\n  as(\n    ErrorConstructor: CustomError,\n    predicate: unknown,\n    message: string,\n    ...positionals: unknown[]\n  ): asserts predicate\n}\n\nexport const invariant: Invariant = (\n  predicate,\n  message,\n  ...positionals\n): asserts predicate => {\n  if (!predicate) {\n    throw new InvariantError(message, ...positionals)\n  }\n}\n\ninvariant.as = (ErrorConstructor, predicate, message, ...positionals) => {\n  if (!predicate) {\n    const formatMessage = positionals.length === 0 ? message : format(message, positionals);\n    let error: Error;\n\n    try {\n      error = Reflect.construct(ErrorConstructor as CustomErrorConstructor, [formatMessage]);\n    } catch(err) {\n      error = (ErrorConstructor as CustomErrorFactory)(formatMessage);\n    }\n\n    throw error\n  }\n}\n","import type { Emitter } from './Emitter'\n\nexport class MemoryLeakError extends Error {\n  constructor(\n    public readonly emitter: Emitter<any>,\n    public readonly type: string | number | symbol,\n    public readonly count: number\n  ) {\n    super(\n      `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`\n    )\n    this.name = 'MaxListenersExceededWarning'\n  }\n}\n","import { MemoryLeakError } from './MemoryLeakError'\n\nexport type EventMap = {\n  [eventName: string]: Array<unknown>\n}\n\nexport type InternalEventNames = 'newListener' | 'removeListener'\n\nexport type InternalListener<Events extends EventMap> = Listener<\n  [eventName: keyof Events, listener: Listener<Array<unknown>>]\n>\n\nexport type Listener<Data extends Array<unknown>> = (...data: Data) => void\n\n/**\n * Node.js-compatible implementation of `EventEmitter`.\n *\n * @example\n * const emitter = new Emitter<{ hello: [string] }>()\n * emitter.on('hello', (name) => console.log(name))\n * emitter.emit('hello', 'John')\n */\nexport class Emitter<Events extends EventMap> {\n  private events: Map<keyof Events, Array<Listener<any>>>\n  private maxListeners: number\n  private hasWarnedAboutPotentialMemoryLeak: boolean\n\n  static defaultMaxListeners = 10\n\n  static listenerCount<Events extends EventMap>(\n    emitter: Emitter<EventMap>,\n    eventName: keyof Events\n  ): number {\n    return emitter.listenerCount<any>(eventName)\n  }\n\n  constructor() {\n    this.events = new Map()\n    this.maxListeners = Emitter.defaultMaxListeners\n    this.hasWarnedAboutPotentialMemoryLeak = false\n  }\n\n  private _emitInternalEvent(\n    internalEventName: InternalEventNames,\n    eventName: keyof Events,\n    listener: Listener<Array<unknown>>\n  ): void {\n    this.emit(\n      internalEventName,\n      // Anything to make TypeScript happy.\n      ...([eventName, listener] as Events['newListener'] &\n        Events['removeListener'])\n    )\n  }\n\n  private _getListeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Array<unknown>>> {\n    // Always return a copy of the listeners array\n    // so they are fixed at the time of the \"_getListeners\" call.\n    return Array.prototype.concat.apply([], this.events.get(eventName)) || []\n  }\n\n  private _removeListener<EventName extends keyof Events>(\n    listeners: Array<Listener<Events[EventName]>>,\n    listener: Listener<Events[EventName]>\n  ): Array<Listener<Events[EventName]>> {\n    const index = listeners.indexOf(listener)\n\n    if (index > -1) {\n      listeners.splice(index, 1)\n    }\n\n    return []\n  }\n\n  private _wrapOnceListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): Listener<Events[EventName]> {\n    const onceListener = (...data: Events[keyof Events]) => {\n      this.removeListener(eventName, onceListener)\n\n      /**\n       * @note Return the result of the original listener.\n       * This way this wrapped preserves listeners that are async.\n       */\n      return listener.apply(this, data)\n    }\n\n    // Inherit the name of the original listener.\n    Object.defineProperty(onceListener, 'name', { value: listener.name })\n\n    return onceListener\n  }\n\n  public setMaxListeners(maxListeners: number): this {\n    this.maxListeners = maxListeners\n    return this\n  }\n\n  /**\n   * Returns the current max listener value for the `Emitter` which is\n   * either set by `emitter.setMaxListeners(n)` or defaults to\n   * `Emitter.defaultMaxListeners`.\n   */\n  public getMaxListeners(): number {\n    return this.maxListeners\n  }\n\n  /**\n   * Returns an array listing the events for which the emitter has registered listeners.\n   * The values in the array will be strings or Symbols.\n   */\n  public eventNames(): Array<keyof Events> {\n    return Array.from(this.events.keys())\n  }\n\n  /**\n   * Synchronously calls each of the listeners registered for the event named `eventName`,\n   * in the order they were registered, passing the supplied arguments to each.\n   * Returns `true` if the event has listeners, `false` otherwise.\n   *\n   * @example\n   * const emitter = new Emitter<{ hello: [string] }>()\n   * emitter.emit('hello', 'John')\n   */\n  public emit<EventName extends keyof Events>(\n    eventName: EventName,\n    ...data: Events[EventName]\n  ): boolean {\n    const listeners = this._getListeners(eventName)\n    listeners.forEach((listener) => {\n      listener.apply(this, data)\n    })\n\n    return listeners.length > 0\n  }\n\n  public addListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public addListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public addListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: InternalListener<Events> | Listener<Events[any]>\n  ): this {\n    // Emit the `newListener` event before adding the listener.\n    this._emitInternalEvent('newListener', eventName, listener)\n\n    const nextListeners = this._getListeners(eventName).concat(listener)\n    this.events.set(eventName, nextListeners)\n\n    if (\n      this.maxListeners > 0 &&\n      this.listenerCount(eventName) > this.maxListeners &&\n      !this.hasWarnedAboutPotentialMemoryLeak\n    ) {\n      this.hasWarnedAboutPotentialMemoryLeak = true\n\n      const memoryLeakWarning = new MemoryLeakError(\n        this,\n        eventName,\n        this.listenerCount(eventName)\n      )\n      console.warn(memoryLeakWarning)\n    }\n\n    return this\n  }\n\n  public on(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public on<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public on<EventName extends keyof Events>(\n    eventName: 'removeListener' | EventName,\n    listener: Listener<any>\n  ): this {\n    return this.addListener(eventName, listener)\n  }\n\n  public once(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public once<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public once<EventName extends keyof Events>(\n    eventName: InternalEventNames | EventName,\n    listener: Listener<any>\n  ): this {\n    return this.addListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    )\n  }\n\n  public prependListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public prependListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public prependListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    const listeners = this._getListeners(eventName)\n\n    if (listeners.length > 0) {\n      const nextListeners = [listener].concat(listeners)\n      this.events.set(eventName, nextListeners)\n    } else {\n      this.events.set(eventName, listeners.concat(listener))\n    }\n\n    return this\n  }\n\n  public prependOnceListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public prependOnceListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public prependOnceListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    return this.prependListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    )\n  }\n\n  public removeListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public removeListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public removeListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    const listeners = this._getListeners(eventName)\n\n    if (listeners.length > 0) {\n      this._removeListener(listeners, listener)\n      this.events.set(eventName, listeners)\n\n      // Emit the `removeListener` event after removing the listener.\n      this._emitInternalEvent('removeListener', eventName, listener)\n    }\n\n    return this\n  }\n\n  public off(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public off<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  /**\n   * Alias for `emitter.removeListener()`.\n   *\n   * @example\n   * emitter.off('hello', listener)\n   */\n  public off(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    return this.removeListener(eventName, listener)\n  }\n\n  public removeAllListeners(eventName?: InternalEventNames): this\n  public removeAllListeners<EventName extends keyof Events>(\n    eventName?: EventName\n  ): this\n  public removeAllListeners(\n    eventName?: InternalEventNames | keyof Events\n  ): this {\n    if (eventName) {\n      this.events.delete(eventName)\n    } else {\n      this.events.clear()\n    }\n\n    return this\n  }\n\n  public listeners(eventName: InternalEventNames): Array<Listener<any>>\n  public listeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Events[EventName]>>\n  /**\n   * Returns a copy of the array of listeners for the event named `eventName`.\n   */\n  public listeners(eventName: InternalEventNames | keyof Events) {\n    return Array.from(this._getListeners(eventName))\n  }\n\n  public listenerCount(eventName: InternalEventNames): number\n  public listenerCount<EventName extends keyof Events>(\n    eventName: EventName\n  ): number\n  /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   */\n  public listenerCount(eventName: InternalEventNames | keyof Events): number {\n    return this._getListeners(eventName).length\n  }\n\n  public rawListeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Events[EventName]>> {\n    return this.listeners(eventName)\n  }\n}\n"],"names":["mod","isNodeMode","target","__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__commonJS","cb","exports","require_codes","module","require_statuses","codes2","codes","getStatusMessage","code","call","status2","message","Error","TypeError","n","parseInt","isNaN","msg","toLowerCase","getStatusCode","map","keys","forEach","status3","Number","createMessageToStatusCodeMap","redirect","empty","retry","source_default","__copyProps","to","from","except","desc","key","get","enumerable","__esModule","value","default","import_set_cookie_parser","__toESM","defaultParseOptions","decodeValues","silent","isNonEmptyString","str","trim","parseString","setCookieValue","options","parts","split","filter","parsed","nameValuePairStr","name","nameValueArr","length","shift","join","parseNameValuePair","assign","decodeURIComponent","e","console","error","cookie","part","sides","trimLeft","value2","expires","Date","maxAge","secure","httpOnly","sameSite","parse","input","headers","getSetCookie","sch","find","warn","Array","isArray","reduce","cookies2","splitCookiesString","cookiesString","start","ch","lastComma","nextStart","cookiesSeparatorFound","cookiesStrings","pos","skipWhitespace","test","charAt","push","substring","PERSISTENCY_KEY","supportsLocalStorage","localStorage","testKey","setItem","getItem","removeItem","isPropertyAccessible","object","method","store","constructor","this","Map","add","request","response","credentials","requestUrl","URL","url","responseCookies","now","parsedResponseCookies","_ref","prevCookies","origin","set","deleteExpiredCookies","originCookies","document","getAll","deleteAll","delete","clear","hydrate","persistedCookies","JSON","_ref2","cookies","_ref3","token","concat","persist","serializedCookies","entries","_ref4","stringify","_ref5","getTime","size","_checkPrivateRedeclaration","obj","privateCollection","has","_assertClassBrand","t","arguments","_classPrivateFieldGet2","s","a","until","async","data","promise","catch","executeHandlers","requestId","handlers","resolutionContext","matchingHandler","result","handler","_result","run","_result2","_result3","parsedResult","handleRequest","emitter","handleRequestOptions","_handleRequestOptions5","_handleRequestOptions6","_handleRequestOptions","emit","onPassthroughResponse","lookupResult","_handleRequestOptions2","strategy","undefined","publicUrl","toPublicUrl","search","unhandledRequestMessage","applyStrategy","strategy2","devUtils","formatMessage","protocol","warning","bind","onUnhandledRequest","_handleRequestOptions3","_handleRequestOptions4","status","toString","readResponseCookies","requiredLookupResult","transformedResponse","transformResponse","onMockedResponse","Disposable","_defineProperty","dispose","Promise","all","subscriptions","subscription","InMemoryHandlersController","initialHandlers","prepend","runtimeHandles","unshift","reset","nextHandlers","currentHandlers","SetupApi","super","_len","_key","invariant","validateHandlers","handlersController","Emitter","publicEmitter","source","destination","rawEmit","_isPiped","sourceEmit","event","pipeEvents","events","createLifeCycleEvents","removeAllListeners","every","use","_len2","runtimeHandlers","_key2","restoreHandlers","isUsed","resetHandlers","_len3","_key3","listHandlers","clone","freeze","toReadonlyArray","_this","on","removeListener","isObject","mergeRight","left","right","rightValue","leftValue","POSITIONALS_EXP","format","positionals","positionalIndex","formattedMessage","replace","match","isEscaped","_","flag","positional","json","serializePositional","slice","InvariantError","error2","stack","nextStack","splice","cleanErrorStack","predicate","isNodeProcess","navigator","product","process","type","versions","node","as","ErrorConstructor","_len4","_key4","Reflect","construct","err","getWorkerByRegistration","registration","absoluteWorkerUrl","findWorker","active","installing","waiting","state","worker2","scriptURL","getWorkerInstance","location","href","mockRegistrations","serviceWorker","getRegistrations","then","registrations","controller","reload","existingRegistration","update","registrationResult","register","includes","scopeUrl","scope","printStartMessage","args","quiet","groupCollapsed","devUtils2","log","workerUrl","workerScope","groupEnd","WorkerChannel","port","postMessage","_len5","rest","_key5","transfer","pruneGetRequestBody","body","createRequestListener","context","messageChannel","ports","payload","id","incomingRequest","Request","requestCloneForLogs","requestClone","RequestHandler","cache","requests","getRequestHandlers","responseClone","responseCloneForLogs","responseInit","statusText","fromEntries","toResponseInit","supports","readableStreamTransfer","responseStreamOrNull","responseBufferOrNull","arrayBuffer","once","_error2$stack","devUtils4","encoder","TextEncoder","RESPONSE_STATUS_CODES_WITHOUT_BODY","Set","isResponseWithoutBody","IS_PATCHED_MODULE","Symbol","colors_exports","yellow","text","blue","gray","red","green","__export","IS_NODE","Logger","prefix","LOGGER_NAME","getVariable","LOGGER_LEVEL","startsWith","debug","isDefinedAndNotEquals","noop","info","success","only","extend","domain","_len6","_key6","logEntry","level","colors","_len7","_key7","performance2","PerformanceEntry","message2","measure","_len8","positionals2","_key8","deltaTime","_len9","_key9","timestamp","_len10","_key10","_len11","_key11","callback","createEntry","customColors","entry","timestampColor","prefixColor","colorize","getWriter","write","formatTimestamp","serializeInput","toLocaleTimeString","getMilliseconds","startTime","performance","endTime","toFixed","_len12","_key12","stdout","_len13","_key13","stderr","_len14","_key14","variableName","_globalThis$variableN","globalThis","expected","MemoryLeakError","count","_Emitter","listenerCount","eventName","maxListeners","defaultMaxListeners","hasWarnedAboutPotentialMemoryLeak","_emitInternalEvent","internalEventName","listener","_getListeners","apply","_removeListener","listeners","index","indexOf","_wrapOnceListener","_this2","onceListener","_len15","_key15","setMaxListeners","getMaxListeners","eventNames","_len16","_key16","addListener","nextListeners","memoryLeakWarning","prependListener","prependOnceListener","off","rawListeners","getGlobalSymbol","symbol","Interceptor","readyState","logger","description","checkEnvironment","runningInstance","getInstance","setup","setInstance","clearInstance","_a","instance","createRequestId","Math","random","BatchInterceptor","interceptors","interceptor","createStartHandler","customOptions","workerRegistration","workerChannel","_responseJson$type","responseJson","Response","writable","isMockedResponse","createResponseListener","worker","missingWorkerMessage","devUtils7","host","window","send","clearInterval","keepAliveInterval","checksum","devUtils5","packageVersion","checkWorkerIntegrity","setInterval","devUtils6","validateWorkerScope","startOptions","startWorkerInstance","pendingInstance","resolve","addEventListener","_context$registration","_context$worker","isMockingEnabled","devUtils3","enableMocking","printStopMessage","devUtils8","DEFAULT_START_OPTIONS","waitUntilReady","mockServiceWorkerUrl","DeferredPromise","_executor","WeakMap","_Class3_brand","WeakSet","executor","deferredExecutor","reject","reason","queueMicrotask","rejectionReason","createDeferredExecutor","privateSet","r","originalResolve","originalReject","privateMap","_classPrivateFieldInitSpec","_classPrivateFieldGet","onFulfilled","onRejected","_decorate","finally","onfinally","defineProperties","configurable","RequestController","responsePromise","respondWith","toInteractiveRequest","requestController","interactiveRequest","emitAsync","listners","_len17","_key17","_FetchInterceptor","fetch","pureFetch","init","resolvedInput","_error","canParseUrl","pendingRequestId","signal","requestAborted","resolverResult","listenersFinished","race","mockedResponse2","createNetworkError","mockedResponse","aborted","FetchInterceptor","cause","EventPolyfill","AT_TARGET","BUBBLING_PHASE","CAPTURING_PHASE","NONE","srcElement","currentTarget","eventPhase","isTrusted","composed","cancelable","defaultPrevented","bubbles","lengthComputable","loaded","total","cancelBubble","returnValue","timeStamp","composedPath","initEvent","preventDefault","stopPropagation","stopImmediatePropagation","ProgressEventPolyfill","SUPPORTS_PROGRESS_EVENT","ProgressEvent","findPropertySource","propertyName","createProxy","proxy","Proxy","constructorCall","methodCall","getProperty","setProperty","newTarget","next","nextValue","propertySource","ownDescriptors","receiver","_len18","_key18","next2","optionsToProxyHandler","createHeadersFromXMLHttpReqestHeaders","headersString","Headers","lines","line","append","IS_MOCKED_RESPONSE","IS_NODE2","XMLHttpRequestController","initialRequest","requestHeaders","responseBuffer","Uint8Array","invoke","methodName","toAbsoluteUrl","registerEvent","requestBody","encode","onResponse","fetchResponse","responseBodyOrNull","getAllResponseHeaders","createResponse","fetchRequest","toFetchApiRequest","onRequest","LOADING","setRequestHeader","nextEvents","define","getResponseHeader","__","HEADERS_RECEIVED","headerValue","allHeaders","headerName","responseText","responseXML","totalResponseBodyLength","trigger","setReadyState","finalizeResponse","DONE","byteLength","reader","getReader","readNextResponseBodyChunk","done","read","concatArrayBuffer","responseBufferToText","buffer","TextDecoder","encoding","decode","responseType","parseJson","array","byteOffset","mimeType","responseBlob","Blob","contentType","DOMParser","some","supportedType","parseFromString","errorWith","nextReadyState","UNSENT","ProgressEventClass","createEvent","registeredEventName","withCredentials","proxyHeaders","_ref6","property","_XMLHttpRequestInterceptor","interceptorSymbol","XMLHttpRequest","PureXMLHttpRequest","_ref7","originalRequest","prototypeDescriptors","getOwnPropertyDescriptors","xhrRequestController","_ref8","_ref9","_ref10","createXMLHttpRequestProxy","XMLHttpRequestInterceptor","createFallbackStart","fallbackInterceptor","_ref11","handleRequest2","_ref12","_ref13","response2","_ref14","createFallbackRequestListener","supportsReadableStreamTransfer","stream","ReadableStream","close","MessageChannel","port1","SetupWorkerApi","devUtils10","createWorkerContext","eventType","_this$context$worker","removeEventListener","bindings","unbind","serviceWorkerApi","startHandler","stopHandler","_context$fallbackInte","_context$startOptions2","createFallbackStop","_context$startOptions","devUtils9","createStop","mergeRight2","stop","setupWorker","_len19","_key19","HEADERS_INVALID_CHARACTERS","normalizeHeaderName","charCodesToRemove","String","fromCharCode","HEADER_VALUE_REMOVE_REGEXP","RegExp","normalizeHeaderValue","isValidHeaderName","i","character","charCodeAt","isToken","isValidHeaderValue","_b","_c","NORMALIZED_HEADERS","RAW_HEADER_NAMES","_Headers","toStringTag","iterator","values","sortedKeys","sort","b","localeCompare","_this$NORMALIZED_HEAD","normalizedName","normalizedValue","resolvedValue","thisArg","setCookieHeader","statuses","normalizeResponseInit","HttpResponse","HeadersPolyfill","cookieString","decorateResponse","xml","formData","SOURCE_FRAME","BUILD_FRAME","resolver","callFrame","declarationFrame","frame","getCallFrame","_args","extendResolverArgs","cloneRequestOrGetFromCache","existingClone","clonedRequest","_this$options","_this$options2","mockedResponsePromise","wrapResolver","executeResolver","errorOrResponse","createExecutionResult","resolverGenerator","fn","nextResponse","resolverGeneratorResult","tokens","char","pattern","j","lexer","prefixes","defaultPattern","escapeString","delimiter","path","tryConsume","mustConsume","nextType","consumeText","suffix","modifier","name_1","pattern_1","re","x","pathname","m","exec","params","regexpToFunction","pathToRegexp","flags","sensitive","stringToRegexp","strict","end","_d","_e","_f","endsWith","endsWithRe","delimiterRe","route","_i","tokens_1","endToken","isEndDelimited","tokensToRegexp","groupsRegex","execResult","regexpToRegexp","paths","arrayToRegexp","REDUNDANT_CHARACTERS_EXP","cleanUrl","normalizePath","baseUrl","maybeAbsoluteUrl","baseURI","decodeURI","encodeURI","getAbsoluteUrl","matchRequestUrl","normalizedPath","cleanPath","parameterName","wildcard","expression","coercePath","Boolean","getCleanUrl","matches","dec","eqIdx","endIdx","lastIndexOf","val","tryDecode","serialize","opt","enc","fieldContentRegExp","isFinite","floor","__toString","isDate","valueOf","toUTCString","priority","encodeURIComponent","decode2","getAllDocumentCookies","cookieUtils","getAllRequestCookies","_store$get","requestCookiesString","cookiesFromHeaders","cookiesFromStore","cookiesFromDocument","getRequestCookies","forwardedCookies","HttpMethods","HttpMethods2","HttpHandler","header","checkRedundantQueryParameters","searchParams","getSearchParams","queryParams","paramName","_args$resolutionConte","hasMatchingMethod","matchMethod","hasMatchingUrl","actualMethod","actual","_args$parsedResult$ma","loggedRequest","requestText","serializeRequest","loggedResponse","responseStatus","serializeResponse","statusColor","getHours","getMinutes","getSeconds","chunk","padStart","getTimestamp","createHttpHandler","http","head","HEAD","GET","post","POST","put","PUT","DELETE","patch","PATCH","OPTIONS","LIBRARY_PREFIX","interpolatedMessage","urlInstance"],"sourceRoot":""}