{"version":3,"file":"static/js/548.60242bd2.chunk.js","mappings":"8KAIO,MAAMA,EAAW,CAEpBC,EAAAA,EAAKC,KAAK,GAADC,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBC,OAASC,GAEhDC,EAAAA,EAAaC,KAChB,CACIC,aAAc,eACdC,cAAe,gBACfC,KAAM,CACFC,SAAU,SACVC,YAAY,UACZC,GAAG,cAOnBd,EAAAA,EAAKC,KAAK,GAADC,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBW,WAAaT,GAEpDC,EAAAA,EAAaC,KAChB,CAAEQ,QAAS,8BAGnBhB,EAAAA,EAAKC,KAAK,GAADC,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBa,SAAWX,GAElDC,EAAAA,EAAaC,KAChB,CAAEQ,QAAS,wBAMnBhB,EAAAA,EAAKkB,IAAI,GAADhB,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBe,QAAO,SAAQC,IAAiB,IAAhB,OAAEC,GAAQD,EAEvE,OAAOb,EAAAA,EAAaC,KAChB,CAAC,CAAEQ,QAAQ,iCAADd,OAAmCmB,EAAOP,MACvD,IAILd,EAAAA,EAAKkB,IAAI,GAADhB,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBe,UAAYb,GAElDC,EAAAA,EAAaC,KAChB,CAAC,CAAEQ,QAAS,kCAKpBhB,EAAAA,EAAKC,KAAK,GAADC,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBe,UAAYb,GAEnDC,EAAAA,EAAaC,KAChB,CAAC,CAAEQ,QAAS,qCCrDlBM,GAAsBC,EAAAA,EAAAA,MACrBxB,GAGA,SAASyB,IACZ,OAAOF,EAAOG,MAAM,CAChBC,cAAc,CAACC,IAAI,uCACnBC,kBAAAA,CAAmBtB,EAAKuB,GAExB,GAER,C","sources":["Mocks/handlers.tsx","Mocks/Manager.tsx"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from '../http/constants';\r\nimport {IUser} from \"../Models/IUser\";\r\n\r\nexport const handlers = [\r\n    // Обработчик для POST запроса аутентификации\r\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.auth}`, (req) => {\r\n        // Возвращаем мокованные данные для успешной аутентификации\r\n        return HttpResponse.json(\r\n            {\r\n                access_token: \"access-token\",\r\n                refresh_token: \"refresh-token\",\r\n                user: {\r\n                    username: \"string\",\r\n                    isActivated:\"boolean\",\r\n                    id:\"string\"\r\n                }\r\n            }\r\n        );\r\n    }),\r\n\r\n    // Обработчик для POST запроса регистрации\r\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.register}`, (req) => {\r\n        // Возвращаем мокованные данные для успешной регистрации\r\n        return HttpResponse.json(\r\n            { message: 'Registration successful' }\r\n        );\r\n    }),\r\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.logout}`, (req) => {\r\n        // Возвращаем мокованные данные для успешной регистрации\r\n        return HttpResponse.json(\r\n            { message: 'logout successful' }\r\n        );\r\n    }),\r\n\r\n\r\n    // Обработчик для GET запроса получения одного маршрута\r\n    http.get(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}/:id`, ({ params }) => {\r\n        \r\n        return HttpResponse.json(\r\n            [{ message: `Get one travel successful id= ${params.id}` }]\r\n        );\r\n    }),\r\n\r\n    // Обработчик для GET запроса получения всех маршрутов\r\n    http.get(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}`, (req) => {\r\n        \r\n        return HttpResponse.json(\r\n            [{ message: 'Get all travels successful' }]\r\n        );\r\n    }),\r\n\r\n    // Обработчик для POST запроса добавления нового маршрута\r\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}`, (req) => {\r\n        \r\n        return HttpResponse.json(\r\n            [{ message: 'Create new travel successful' }]\r\n        );\r\n    }),\r\n]\r\n","import { setupWorker, SetupWorker } from 'msw/browser';\r\nimport {handlers} from \"./handlers\";\r\n\r\nconst worker: SetupWorker = setupWorker(\r\n    ...handlers\r\n);\r\n\r\nexport function startWorker(): Promise<void> {\r\n    return worker.start({\r\n        serviceWorker:{url:\"/TensorProject/mockServiceWorker.js\"},\r\n        onUnhandledRequest(req, print) {\r\n            return; // Пропустим все запросы, не подходящие под наши хэндлеры\r\n        }\r\n    }) as Promise<void>; // либа не экспортирует нужный интерфейс\r\n}"],"names":["handlers","http","post","concat","OUR_API_ADDRESS","OUR_API_ENDPOINTS","auth","req","HttpResponse","json","access_token","refresh_token","user","username","isActivated","id","register","message","logout","get","travels","_ref","params","worker","setupWorker","startWorker","start","serviceWorker","url","onUnhandledRequest","print"],"sourceRoot":""}