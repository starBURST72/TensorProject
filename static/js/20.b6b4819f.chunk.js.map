{"version":3,"file":"static/js/20.b6b4819f.chunk.js","mappings":"wLAGO,MAAMA,EAAW,CAEpBC,EAAAA,EAAKC,KAAM,GAAEC,EAAAA,KAAmBC,EAAAA,EAAkBC,QAASC,GAEhDC,EAAAA,EAAaC,KAChB,CACIC,MAAO,mBAMnBR,EAAAA,EAAKC,KAAM,GAAEC,EAAAA,KAAmBC,EAAAA,EAAkBM,YAAaJ,GAEpDC,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAS,+BAMpBV,EAAAA,EAAKW,IAAK,GAAET,EAAAA,KAAmBC,EAAAA,EAAkBS,eAAe,EAAGC,YAExDP,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAU,iCAAgCG,EAAOC,UAK5Dd,EAAAA,EAAKW,IAAK,GAAET,EAAAA,KAAmBC,EAAAA,EAAkBS,WAAYP,GAElDC,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAS,kCAKpBV,EAAAA,EAAKC,KAAM,GAAEC,EAAAA,KAAmBC,EAAAA,EAAkBS,WAAYP,GAEnDC,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAS,qCCxClBK,GAAsBC,EAAAA,EAAAA,MACrBjB,GAGA,SAASkB,IACZ,OAAOF,EAAOG,MAAM,CAChBC,cAAc,CAACC,IAAI,uCACnBC,kBAAAA,CAAmBhB,EAAKiB,GAExB,GAER,C","sources":["Mocks/handlers.tsx","Mocks/index.tsx"],"sourcesContent":["import { http, HttpResponse } from 'msw';\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from '../API/constants';\n\nexport const handlers = [\n    // Обработчик для POST запроса аутентификации\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.auth}`, (req) => {\n        // Возвращаем мокованные данные для успешной аутентификации\n        return HttpResponse.json(\n            {\n                token: \"mocked-token\"\n            }\n        );\n    }),\n\n    // Обработчик для POST запроса регистрации\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.register}`, (req) => {\n        // Возвращаем мокованные данные для успешной регистрации\n        return HttpResponse.json(\n            [{ message: 'Registration successful' }]\n        );\n    }),\n\n\n    // Обработчик для GET запроса получения одного маршрута\n    http.get(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}/:id`, ({ params }) => {\n        \n        return HttpResponse.json(\n            [{ message: `Get one travel successful id= ${params.id}` }]\n        );\n    }),\n\n    // Обработчик для GET запроса получения всех маршрутов\n    http.get(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}`, (req) => {\n        \n        return HttpResponse.json(\n            [{ message: 'Get all travels successful' }]\n        );\n    }),\n\n    // Обработчик для POST запроса добавления нового маршрута\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}`, (req) => {\n        \n        return HttpResponse.json(\n            [{ message: 'Create new travel successful' }]\n        );\n    }),\n]\n","import { setupWorker, SetupWorker } from 'msw/browser';\nimport {handlers} from \"./handlers\";\n\nconst worker: SetupWorker = setupWorker(\n    ...handlers\n);\n\nexport function startWorker(): Promise<void> {\n    return worker.start({\n        serviceWorker:{url:\"/TensorProject/mockServiceWorker.js\"},\n        onUnhandledRequest(req, print) {\n            return; // Пропустим все запросы, не подходящие под наши хэндлеры\n        }\n    }) as Promise<void>; // либа не экспортирует нужный интерфейс\n}"],"names":["handlers","http","post","OUR_API_ADDRESS","OUR_API_ENDPOINTS","auth","req","HttpResponse","json","token","register","message","get","travels","params","id","worker","setupWorker","startWorker","start","serviceWorker","url","onUnhandledRequest","print"],"sourceRoot":""}