{"version":3,"file":"static/js/20.71698214.chunk.js","mappings":"4KAGO,MAAMA,EAAW,CAEpBC,EAAAA,EAAKC,KAAK,GAADC,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBC,OAASC,GAEhDC,EAAAA,EAAaC,KAChB,CACIC,MAAO,mBAMnBT,EAAAA,EAAKC,KAAK,GAADC,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBM,WAAaJ,GAEpDC,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAS,+BAMpBX,EAAAA,EAAKY,IAAI,GAADV,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBS,QAAO,SAAQC,IAAiB,IAAhB,OAAEC,GAAQD,EAEvE,OAAOP,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAQ,iCAADT,OAAmCa,EAAOC,MACvD,IAILhB,EAAAA,EAAKY,IAAI,GAADV,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBS,UAAYP,GAElDC,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAS,kCAKpBX,EAAAA,EAAKC,KAAK,GAADC,OAAIC,EAAAA,EAAe,KAAAD,OAAIE,EAAAA,EAAkBS,UAAYP,GAEnDC,EAAAA,EAAaC,KAChB,CAAC,CAAEG,QAAS,qCCxClBM,GAAsBC,EAAAA,EAAAA,MACrBnB,GAGA,SAASoB,IACZ,OAAOF,EAAOG,MAAM,CAChBC,kBAAAA,CAAmBf,EAAKgB,GAExB,GAER,C","sources":["Mocks/handlers.tsx","Mocks/index.tsx"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from '../API/constants';\r\n\r\nexport const handlers = [\r\n    // Обработчик для POST запроса аутентификации\r\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.auth}`, (req) => {\r\n        // Возвращаем мокованные данные для успешной аутентификации\r\n        return HttpResponse.json(\r\n            {\r\n                token: \"mocked-token\"\r\n            }\r\n        );\r\n    }),\r\n\r\n    // Обработчик для POST запроса регистрации\r\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.register}`, (req) => {\r\n        // Возвращаем мокованные данные для успешной регистрации\r\n        return HttpResponse.json(\r\n            [{ message: 'Registration successful' }]\r\n        );\r\n    }),\r\n\r\n\r\n    // Обработчик для GET запроса получения одного маршрута\r\n    http.get(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}/:id`, ({ params }) => {\r\n        \r\n        return HttpResponse.json(\r\n            [{ message: `Get one travel successful id= ${params.id}` }]\r\n        );\r\n    }),\r\n\r\n    // Обработчик для GET запроса получения всех маршрутов\r\n    http.get(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}`, (req) => {\r\n        \r\n        return HttpResponse.json(\r\n            [{ message: 'Get all travels successful' }]\r\n        );\r\n    }),\r\n\r\n    // Обработчик для POST запроса добавления нового маршрута\r\n    http.post(`${OUR_API_ADDRESS}/${OUR_API_ENDPOINTS.travels}`, (req) => {\r\n        \r\n        return HttpResponse.json(\r\n            [{ message: 'Create new travel successful' }]\r\n        );\r\n    }),\r\n]\r\n","import { setupWorker, SetupWorker } from 'msw/browser';\r\nimport {handlers} from \"./handlers\";\r\n\r\nconst worker: SetupWorker = setupWorker(\r\n    ...handlers\r\n);\r\n\r\nexport function startWorker(): Promise<void> {\r\n    return worker.start({\r\n        onUnhandledRequest(req, print) {\r\n            return; // Пропустим все запросы, не подходящие под наши хэндлеры\r\n        }\r\n    }) as Promise<void>; // либа не экспортирует нужный интерфейс\r\n}"],"names":["handlers","http","post","concat","OUR_API_ADDRESS","OUR_API_ENDPOINTS","auth","req","HttpResponse","json","token","register","message","get","travels","_ref","params","id","worker","setupWorker","startWorker","start","onUnhandledRequest","print"],"sourceRoot":""}